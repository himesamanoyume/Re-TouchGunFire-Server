// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SocketProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketProtocol {

  /// <summary>Holder for reflection information generated from SocketProtocol.proto</summary>
  public static partial class SocketProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SocketProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SocketProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRTb2NrZXRQcm90b2NvbC5wcm90bxIOU29ja2V0UHJvdG9jb2wiuwMKCE1h",
            "aW5QYWNrEjAKC1JlcXVlc3RDb2RlGAEgASgOMhsuU29ja2V0UHJvdG9jb2wu",
            "UmVxdWVzdENvZGUSLgoKQWN0aW9uQ29kZRgCIAEoDjIaLlNvY2tldFByb3Rv",
            "Y29sLkFjdGlvbkNvZGUSLgoKUmV0dXJuQ29kZRgDIAEoDjIaLlNvY2tldFBy",
            "b3RvY29sLlJldHVybkNvZGUSMgoMUmVnaXN0ZXJQYWNrGAQgASgLMhwuU29j",
            "a2V0UHJvdG9jb2wuUmVnaXN0ZXJQYWNrEiwKCUxvZ2luUGFjaxgFIAEoCzIZ",
            "LlNvY2tldFByb3RvY29sLkxvZ2luUGFjaxILCgNVaWQYBiABKAUSNgoOUGxh",
            "eWVySW5mb1BhY2sYByABKAsyHi5Tb2NrZXRQcm90b2NvbC5QbGF5ZXJJbmZv",
            "UGFjaxIwCgtGcmllbmRzUGFjaxgIIAMoCzIbLlNvY2tldFByb3RvY29sLkZy",
            "aWVuZHNQYWNrEkQKFVNlbmRSZXF1ZXN0RnJpZW5kUGFjaxgJIAEoCzIlLlNv",
            "Y2tldFByb3RvY29sLlNlbmRSZXF1ZXN0RnJpZW5kUGFjayJFCgxSZWdpc3Rl",
            "clBhY2sSDwoHQWNjb3VudBgBIAEoCRIQCghQYXNzd29yZBgCIAEoCRISCgpQ",
            "bGF5ZXJOYW1lGAMgASgJIjsKCUxvZ2luUGFjaxILCgNVaWQYASABKAUSDwoH",
            "QWNjb3VudBgCIAEoCRIQCghQYXNzd29yZBgDIAEoCSLVAQoOUGxheWVySW5m",
            "b1BhY2sSCwoDVWlkGAEgASgFEhIKClBsYXllck5hbWUYAiABKAkSDQoFTGV2",
            "ZWwYAyABKAUSEgoKQ3VycmVudEV4cBgEIAEoAhI1Cg5FcXVpcG1lbnRQYWNr",
            "cxgFIAMoCzIdLlNvY2tldFByb3RvY29sLkVxdWlwbWVudFBhY2sSKQoIR3Vu",
            "UGFja3MYBiADKAsyFy5Tb2NrZXRQcm90b2NvbC5HdW5QYWNrEg8KB0RpYW1v",
            "bmQYByABKAMSDAoEQ29pbhgIIAEoAyKlBAoNRXF1aXBtZW50UGFjaxITCgtF",
            "cXVpcG1lbnRJZBgBIAEoBRI1Cg1FcXVpcG1lbnROYW1lGAIgASgOMh4uU29j",
            "a2V0UHJvdG9jb2wuRUVxdWlwbWVudE5hbWUSNQoNRXF1aXBtZW50U3VpdBgD",
            "IAEoDjIeLlNvY2tldFByb3RvY29sLkVFcXVpcG1lbnRTdWl0EjsKEEVxdWlw",
            "bWVudFF1YWxpdHkYBCABKA4yIS5Tb2NrZXRQcm90b2NvbC5FRXF1aXBtZW50",
            "UXVhbGl0eRIqCghTdWJQcm9wMRgFIAEoDjIYLlNvY2tldFByb3RvY29sLkVT",
            "dWJQcm9wEhUKDVN1YlByb3AxVmFsdWUYBiABKAISKgoIU3ViUHJvcDIYByAB",
            "KA4yGC5Tb2NrZXRQcm90b2NvbC5FU3ViUHJvcBIVCg1TdWJQcm9wMlZhbHVl",
            "GAggASgCEioKCFN1YlByb3AzGAkgASgOMhguU29ja2V0UHJvdG9jb2wuRVN1",
            "YlByb3ASFQoNU3ViUHJvcDNWYWx1ZRgKIAEoAhIxCgdUYWxlbnQxGAsgASgO",
            "MiAuU29ja2V0UHJvdG9jb2wuRUVxdWlwbWVudFRhbGVudBIxCgdUYWxlbnQy",
            "GAwgASgOMiAuU29ja2V0UHJvdG9jb2wuRUVxdWlwbWVudFRhbGVudBIlCgVV",
            "c2luZxgNIAEoDjIWLlNvY2tldFByb3RvY29sLkVVc2luZyKXBAoHR3VuUGFj",
            "axINCgVHdW5JZBgBIAEoBRIpCgdHdW5OYW1lGAIgASgOMhguU29ja2V0UHJv",
            "dG9jb2wuRUd1bk5hbWUSKQoHR3VuVHlwZRgDIAEoDjIYLlNvY2tldFByb3Rv",
            "Y29sLkVHdW5UeXBlEg8KB0Jhc2VETUcYBCABKAISEgoKRmlyaW5nUmF0ZRgF",
            "IAEoAhIiChpDdXJyZW50RmlyaW5nUmF0ZVBlclNlY29uZBgGIAEoAhIQCghN",
            "YWdhemluZRgHIAEoBRIVCg1NYWdhemluZUNvdW50GAggASgFEi4KCENvcmVQ",
            "cm9wGAkgASgOMhwuU29ja2V0UHJvdG9jb2wuRUd1bkNvcmVQcm9wEhUKDUNv",
            "cmVQcm9wVmFsdWUYCiABKAISKgoIU3ViUHJvcDEYCyABKA4yGC5Tb2NrZXRQ",
            "cm90b2NvbC5FU3ViUHJvcBIVCg1TdWJQcm9wMVZhbHVlGAwgASgCEioKCFN1",
            "YlByb3AyGA0gASgOMhguU29ja2V0UHJvdG9jb2wuRVN1YlByb3ASFQoNU3Vi",
            "UHJvcDJWYWx1ZRgOIAEoAhIqCghTdWJQcm9wMxgPIAEoDjIYLlNvY2tldFBy",
            "b3RvY29sLkVTdWJQcm9wEhUKDVN1YlByb3AzVmFsdWUYECABKAISJQoFVXNp",
            "bmcYESABKA4yFi5Tb2NrZXRQcm90b2NvbC5FVXNpbmciRwoLRnJpZW5kc1Bh",
            "Y2sSEgoKUGxheWVyMVVpZBgBIAEoBRISCgpQbGF5ZXIyVWlkGAIgASgFEhAK",
            "CElzRnJpZW5kGAMgASgFIjAKFVNlbmRSZXF1ZXN0RnJpZW5kUGFjaxIXCg9U",
            "YXJnZXRQbGF5ZXJVaWQYASABKAUqSgoLUmVxdWVzdENvZGUSDwoLUmVxdWVz",
            "dE5vbmUQABIICgRVc2VyEAESCgoGR2FtaW5nEAISCAoEVGVhbRADEgoKBkZy",
            "aWVuZBAEKrgCCgpBY3Rpb25Db2RlEg4KCkFjdGlvbk5vbmUQABIMCghSZWdp",
            "c3RlchABEgkKBUxvZ2luEAISEgoOSW5pdFBsYXllckluZm8QAxIMCghKb2lu",
            "VGVhbRAEEg4KClVwZGF0ZVRlYW0QBRINCglMZXZlbFRlYW0QBhIUChBVcGRh",
            "dGVQbGF5ZXJJbmZvEAcSDwoLUmVhZHlBdHRhY2sQCBIPCgtTdGFydEF0dGFj",
            "axAJEg0KCU5leHRFbmVteRAKEg0KCUVuZEF0dGFjaxALEgwKCEV4aXRHYW1l",
            "EAwSDQoJQnJlYWtUZWFtEA0SDgoKR2V0RnJpZW5kcxAOEhQKEEdldEZyaWVu",
            "ZFJlcXVlc3QQDxIQCgxTZWFyY2hGcmllbmQQEBIVChFTZW5kUmVxdWVzdEZy",
            "aWVuZBARKkgKClJldHVybkNvZGUSDgoKUmV0dXJuTm9uZRAAEgsKB1N1Y2Nl",
            "c3MQARIICgRGYWlsEAISEwoPUmVwZWF0ZWRSZXF1ZXN0EAMqGQoGRVVzaW5n",
            "EgYKAk5vEAASBwoDWWVzEAEqUAoIRUd1bk5hbWUSCAoEQUs0NxAAEgcKA1NM",
            "NxABEgcKA01QNRACEggKBE03MDAQAxIHCgNNNjAQBBIKCgZTUEFTMTIQBRIJ",
            "CgVNMTkxMRAGKkQKCEVHdW5UeXBlEgYKAkFSEAASBwoDRE1SEAESBwoDU01H",
            "EAISBgoCU0cQAxIGCgJTUhAEEgYKAk1HEAUSBgoCSEcQBirRAQoMRUd1bkNv",
            "cmVQcm9wEhcKE2FsbERtZ0JvbnVzQ29yZVByb3AQABIWChJhckRtZ0JvbnVz",
            "Q29yZVByb3AQARIXChNkbXJEbWdCb251c0NvcmVQcm9wEAISFwoTc21nRG1n",
            "Qm9udXNDb3JlUHJvcBADEhYKEnNnRG1nQm9udXNDb3JlUHJvcBAEEhYKEnNy",
            "RG1nQm9udXNDb3JlUHJvcBAFEhYKEm1nRG1nQm9udXNDb3JlUHJvcBAGEhYK",
            "EmhnRG1nQm9udXNDb3JlUHJvcBAHKj0KDkVFcXVpcG1lbnRTdWl0Eg0KCVRl",
            "c3QxU3VpdBAAEg0KCVRlc3QyU3VpdBABEg0KCVRlc3QzU3VpdBACKlAKEUVF",
            "cXVpcG1lbnRRdWFsaXR5EgoKBk5vcm1hbBAAEggKBEdvb2QQARINCglFeGNl",
            "bGxlbnQQAhIMCghBcnRpZmFjdBADEggKBEVwaWMQBCouCg5FRXF1aXBtZW50",
            "TmFtZRINCglUZXN0MU5hbWUQABINCglUZXN0Mk5hbWUQASrSAgoIRVN1YlBy",
            "b3ASEQoNaGVhbHRoU3ViUHJvcBAAEhcKE2Jhc2VEbWdCb251c1N1YlByb3AQ",
            "ARIYChRjRG1nUmF0ZUJvbnVzU3ViUHJvcBACEhQKEGNEbWdCb251c1N1YlBy",
            "b3AQAxIbChdoZWFkc2hvdERtZ0JvbnVzU3ViUHJvcBAEEhUKEXBSYXRlQm9u",
            "dXNTdWJQcm9wEAUSEwoPYWJlQm9udXNTdWJQcm9wEAYSFQoRYXJEbWdCb251",
            "c1N1YlByb3AQBxIWChJkbXJEbWdCb251c1N1YlByb3AQCBIWChJzbWdEbWdC",
            "b251c1N1YlByb3AQCRIVChFzZ0RtZ0JvbnVzU3ViUHJvcBAKEhUKEXNyRG1n",
            "Qm9udXNTdWJQcm9wEAsSFQoRbWdEbWdCb251c1N1YlByb3AQDBIVChFoZ0Rt",
            "Z0JvbnVzU3ViUHJvcBANKkgKEEVFcXVpcG1lbnRUYWxlbnQSGQoVVGVzdDFF",
            "cXVpcG1lbnRUYWxlbnQxEAASGQoVVGVzdDFFcXVpcG1lbnRUYWxlbnQyEAFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SocketProtocol.RequestCode), typeof(global::SocketProtocol.ActionCode), typeof(global::SocketProtocol.ReturnCode), typeof(global::SocketProtocol.EUsing), typeof(global::SocketProtocol.EGunName), typeof(global::SocketProtocol.EGunType), typeof(global::SocketProtocol.EGunCoreProp), typeof(global::SocketProtocol.EEquipmentSuit), typeof(global::SocketProtocol.EEquipmentQuality), typeof(global::SocketProtocol.EEquipmentName), typeof(global::SocketProtocol.ESubProp), typeof(global::SocketProtocol.EEquipmentTalent), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.MainPack), global::SocketProtocol.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "RegisterPack", "LoginPack", "Uid", "PlayerInfoPack", "FriendsPack", "SendRequestFriendPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.RegisterPack), global::SocketProtocol.RegisterPack.Parser, new[]{ "Account", "Password", "PlayerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.LoginPack), global::SocketProtocol.LoginPack.Parser, new[]{ "Uid", "Account", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.PlayerInfoPack), global::SocketProtocol.PlayerInfoPack.Parser, new[]{ "Uid", "PlayerName", "Level", "CurrentExp", "EquipmentPacks", "GunPacks", "Diamond", "Coin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.EquipmentPack), global::SocketProtocol.EquipmentPack.Parser, new[]{ "EquipmentId", "EquipmentName", "EquipmentSuit", "EquipmentQuality", "SubProp1", "SubProp1Value", "SubProp2", "SubProp2Value", "SubProp3", "SubProp3Value", "Talent1", "Talent2", "Using" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.GunPack), global::SocketProtocol.GunPack.Parser, new[]{ "GunId", "GunName", "GunType", "BaseDMG", "FiringRate", "CurrentFiringRatePerSecond", "Magazine", "MagazineCount", "CoreProp", "CorePropValue", "SubProp1", "SubProp1Value", "SubProp2", "SubProp2Value", "SubProp3", "SubProp3Value", "Using" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.FriendsPack), global::SocketProtocol.FriendsPack.Parser, new[]{ "Player1Uid", "Player2Uid", "IsFriend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.SendRequestFriendPack), global::SocketProtocol.SendRequestFriendPack.Parser, new[]{ "TargetPlayerUid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    [pbr::OriginalName("User")] User = 1,
    [pbr::OriginalName("Gaming")] Gaming = 2,
    [pbr::OriginalName("Team")] Team = 3,
    [pbr::OriginalName("Friend")] Friend = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    [pbr::OriginalName("Register")] Register = 1,
    [pbr::OriginalName("Login")] Login = 2,
    [pbr::OriginalName("InitPlayerInfo")] InitPlayerInfo = 3,
    [pbr::OriginalName("JoinTeam")] JoinTeam = 4,
    [pbr::OriginalName("UpdateTeam")] UpdateTeam = 5,
    [pbr::OriginalName("LevelTeam")] LevelTeam = 6,
    [pbr::OriginalName("UpdatePlayerInfo")] UpdatePlayerInfo = 7,
    [pbr::OriginalName("ReadyAttack")] ReadyAttack = 8,
    [pbr::OriginalName("StartAttack")] StartAttack = 9,
    [pbr::OriginalName("NextEnemy")] NextEnemy = 10,
    [pbr::OriginalName("EndAttack")] EndAttack = 11,
    [pbr::OriginalName("ExitGame")] ExitGame = 12,
    [pbr::OriginalName("BreakTeam")] BreakTeam = 13,
    [pbr::OriginalName("GetFriends")] GetFriends = 14,
    [pbr::OriginalName("GetFriendRequest")] GetFriendRequest = 15,
    [pbr::OriginalName("SearchFriend")] SearchFriend = 16,
    [pbr::OriginalName("SendRequestFriend")] SendRequestFriend = 17,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Fail")] Fail = 2,
    [pbr::OriginalName("RepeatedRequest")] RepeatedRequest = 3,
  }

  public enum EUsing {
    [pbr::OriginalName("No")] No = 0,
    [pbr::OriginalName("Yes")] Yes = 1,
  }

  public enum EGunName {
    [pbr::OriginalName("AK47")] Ak47 = 0,
    [pbr::OriginalName("SL7")] Sl7 = 1,
    [pbr::OriginalName("MP5")] Mp5 = 2,
    [pbr::OriginalName("M700")] M700 = 3,
    [pbr::OriginalName("M60")] M60 = 4,
    [pbr::OriginalName("SPAS12")] Spas12 = 5,
    [pbr::OriginalName("M1911")] M1911 = 6,
  }

  public enum EGunType {
    [pbr::OriginalName("AR")] Ar = 0,
    [pbr::OriginalName("DMR")] Dmr = 1,
    [pbr::OriginalName("SMG")] Smg = 2,
    [pbr::OriginalName("SG")] Sg = 3,
    [pbr::OriginalName("SR")] Sr = 4,
    [pbr::OriginalName("MG")] Mg = 5,
    [pbr::OriginalName("HG")] Hg = 6,
  }

  public enum EGunCoreProp {
    [pbr::OriginalName("allDmgBonusCoreProp")] AllDmgBonusCoreProp = 0,
    [pbr::OriginalName("arDmgBonusCoreProp")] ArDmgBonusCoreProp = 1,
    [pbr::OriginalName("dmrDmgBonusCoreProp")] DmrDmgBonusCoreProp = 2,
    [pbr::OriginalName("smgDmgBonusCoreProp")] SmgDmgBonusCoreProp = 3,
    [pbr::OriginalName("sgDmgBonusCoreProp")] SgDmgBonusCoreProp = 4,
    [pbr::OriginalName("srDmgBonusCoreProp")] SrDmgBonusCoreProp = 5,
    [pbr::OriginalName("mgDmgBonusCoreProp")] MgDmgBonusCoreProp = 6,
    [pbr::OriginalName("hgDmgBonusCoreProp")] HgDmgBonusCoreProp = 7,
  }

  public enum EEquipmentSuit {
    [pbr::OriginalName("Test1Suit")] Test1Suit = 0,
    [pbr::OriginalName("Test2Suit")] Test2Suit = 1,
    [pbr::OriginalName("Test3Suit")] Test3Suit = 2,
  }

  public enum EEquipmentQuality {
    [pbr::OriginalName("Normal")] Normal = 0,
    [pbr::OriginalName("Good")] Good = 1,
    [pbr::OriginalName("Excellent")] Excellent = 2,
    [pbr::OriginalName("Artifact")] Artifact = 3,
    [pbr::OriginalName("Epic")] Epic = 4,
  }

  public enum EEquipmentName {
    [pbr::OriginalName("Test1Name")] Test1Name = 0,
    [pbr::OriginalName("Test2Name")] Test2Name = 1,
  }

  public enum ESubProp {
    [pbr::OriginalName("healthSubProp")] HealthSubProp = 0,
    [pbr::OriginalName("baseDmgBonusSubProp")] BaseDmgBonusSubProp = 1,
    [pbr::OriginalName("cDmgRateBonusSubProp")] CDmgRateBonusSubProp = 2,
    [pbr::OriginalName("cDmgBonusSubProp")] CDmgBonusSubProp = 3,
    [pbr::OriginalName("headshotDmgBonusSubProp")] HeadshotDmgBonusSubProp = 4,
    [pbr::OriginalName("pRateBonusSubProp")] PRateBonusSubProp = 5,
    [pbr::OriginalName("abeBonusSubProp")] AbeBonusSubProp = 6,
    [pbr::OriginalName("arDmgBonusSubProp")] ArDmgBonusSubProp = 7,
    [pbr::OriginalName("dmrDmgBonusSubProp")] DmrDmgBonusSubProp = 8,
    [pbr::OriginalName("smgDmgBonusSubProp")] SmgDmgBonusSubProp = 9,
    [pbr::OriginalName("sgDmgBonusSubProp")] SgDmgBonusSubProp = 10,
    [pbr::OriginalName("srDmgBonusSubProp")] SrDmgBonusSubProp = 11,
    [pbr::OriginalName("mgDmgBonusSubProp")] MgDmgBonusSubProp = 12,
    [pbr::OriginalName("hgDmgBonusSubProp")] HgDmgBonusSubProp = 13,
  }

  public enum EEquipmentTalent {
    [pbr::OriginalName("Test1EquipmentTalent1")] Test1EquipmentTalent1 = 0,
    [pbr::OriginalName("Test1EquipmentTalent2")] Test1EquipmentTalent2 = 1,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      registerPack_ = other.registerPack_ != null ? other.registerPack_.Clone() : null;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      uid_ = other.uid_;
      playerInfoPack_ = other.playerInfoPack_ != null ? other.playerInfoPack_.Clone() : null;
      friendsPack_ = other.friendsPack_.Clone();
      sendRequestFriendPack_ = other.sendRequestFriendPack_ != null ? other.sendRequestFriendPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "RequestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SocketProtocol.RequestCode requestCode_ = global::SocketProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "ActionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SocketProtocol.ActionCode actionCode_ = global::SocketProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "ReturnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SocketProtocol.ReturnCode returnCode_ = global::SocketProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "RegisterPack" field.</summary>
    public const int RegisterPackFieldNumber = 4;
    private global::SocketProtocol.RegisterPack registerPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.RegisterPack RegisterPack {
      get { return registerPack_; }
      set {
        registerPack_ = value;
      }
    }

    /// <summary>Field number for the "LoginPack" field.</summary>
    public const int LoginPackFieldNumber = 5;
    private global::SocketProtocol.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 6;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerInfoPack" field.</summary>
    public const int PlayerInfoPackFieldNumber = 7;
    private global::SocketProtocol.PlayerInfoPack playerInfoPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.PlayerInfoPack PlayerInfoPack {
      get { return playerInfoPack_; }
      set {
        playerInfoPack_ = value;
      }
    }

    /// <summary>Field number for the "FriendsPack" field.</summary>
    public const int FriendsPackFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SocketProtocol.FriendsPack> _repeated_friendsPack_codec
        = pb::FieldCodec.ForMessage(66, global::SocketProtocol.FriendsPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.FriendsPack> friendsPack_ = new pbc::RepeatedField<global::SocketProtocol.FriendsPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.FriendsPack> FriendsPack {
      get { return friendsPack_; }
    }

    /// <summary>Field number for the "SendRequestFriendPack" field.</summary>
    public const int SendRequestFriendPackFieldNumber = 9;
    private global::SocketProtocol.SendRequestFriendPack sendRequestFriendPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.SendRequestFriendPack SendRequestFriendPack {
      get { return sendRequestFriendPack_; }
      set {
        sendRequestFriendPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(RegisterPack, other.RegisterPack)) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (Uid != other.Uid) return false;
      if (!object.Equals(PlayerInfoPack, other.PlayerInfoPack)) return false;
      if(!friendsPack_.Equals(other.friendsPack_)) return false;
      if (!object.Equals(SendRequestFriendPack, other.SendRequestFriendPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (registerPack_ != null) hash ^= RegisterPack.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (playerInfoPack_ != null) hash ^= PlayerInfoPack.GetHashCode();
      hash ^= friendsPack_.GetHashCode();
      if (sendRequestFriendPack_ != null) hash ^= SendRequestFriendPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (registerPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RegisterPack);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginPack);
      }
      if (Uid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Uid);
      }
      if (playerInfoPack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerInfoPack);
      }
      friendsPack_.WriteTo(output, _repeated_friendsPack_codec);
      if (sendRequestFriendPack_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SendRequestFriendPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (registerPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterPack);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (playerInfoPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfoPack);
      }
      size += friendsPack_.CalculateSize(_repeated_friendsPack_codec);
      if (sendRequestFriendPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendRequestFriendPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.registerPack_ != null) {
        if (registerPack_ == null) {
          RegisterPack = new global::SocketProtocol.RegisterPack();
        }
        RegisterPack.MergeFrom(other.RegisterPack);
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SocketProtocol.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.playerInfoPack_ != null) {
        if (playerInfoPack_ == null) {
          PlayerInfoPack = new global::SocketProtocol.PlayerInfoPack();
        }
        PlayerInfoPack.MergeFrom(other.PlayerInfoPack);
      }
      friendsPack_.Add(other.friendsPack_);
      if (other.sendRequestFriendPack_ != null) {
        if (sendRequestFriendPack_ == null) {
          SendRequestFriendPack = new global::SocketProtocol.SendRequestFriendPack();
        }
        SendRequestFriendPack.MergeFrom(other.SendRequestFriendPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SocketProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SocketProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SocketProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (registerPack_ == null) {
              RegisterPack = new global::SocketProtocol.RegisterPack();
            }
            input.ReadMessage(RegisterPack);
            break;
          }
          case 42: {
            if (loginPack_ == null) {
              LoginPack = new global::SocketProtocol.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 48: {
            Uid = input.ReadInt32();
            break;
          }
          case 58: {
            if (playerInfoPack_ == null) {
              PlayerInfoPack = new global::SocketProtocol.PlayerInfoPack();
            }
            input.ReadMessage(PlayerInfoPack);
            break;
          }
          case 66: {
            friendsPack_.AddEntriesFrom(input, _repeated_friendsPack_codec);
            break;
          }
          case 74: {
            if (sendRequestFriendPack_ == null) {
              SendRequestFriendPack = new global::SocketProtocol.SendRequestFriendPack();
            }
            input.ReadMessage(SendRequestFriendPack);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterPack : pb::IMessage<RegisterPack> {
    private static readonly pb::MessageParser<RegisterPack> _parser = new pb::MessageParser<RegisterPack>(() => new RegisterPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack(RegisterPack other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack Clone() {
      return new RegisterPack(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPack other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      uid_ = other.uid_;
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfoPack : pb::IMessage<PlayerInfoPack> {
    private static readonly pb::MessageParser<PlayerInfoPack> _parser = new pb::MessageParser<PlayerInfoPack>(() => new PlayerInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack(PlayerInfoPack other) : this() {
      uid_ = other.uid_;
      playerName_ = other.playerName_;
      level_ = other.level_;
      currentExp_ = other.currentExp_;
      equipmentPacks_ = other.equipmentPacks_.Clone();
      gunPacks_ = other.gunPacks_.Clone();
      diamond_ = other.diamond_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack Clone() {
      return new PlayerInfoPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExp" field.</summary>
    public const int CurrentExpFieldNumber = 4;
    private float currentExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentPacks" field.</summary>
    public const int EquipmentPacksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SocketProtocol.EquipmentPack> _repeated_equipmentPacks_codec
        = pb::FieldCodec.ForMessage(42, global::SocketProtocol.EquipmentPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.EquipmentPack> equipmentPacks_ = new pbc::RepeatedField<global::SocketProtocol.EquipmentPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.EquipmentPack> EquipmentPacks {
      get { return equipmentPacks_; }
    }

    /// <summary>Field number for the "GunPacks" field.</summary>
    public const int GunPacksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SocketProtocol.GunPack> _repeated_gunPacks_codec
        = pb::FieldCodec.ForMessage(50, global::SocketProtocol.GunPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.GunPack> gunPacks_ = new pbc::RepeatedField<global::SocketProtocol.GunPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.GunPack> GunPacks {
      get { return gunPacks_; }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 7;
    private long diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 8;
    private long coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentExp, other.CurrentExp)) return false;
      if(!equipmentPacks_.Equals(other.equipmentPacks_)) return false;
      if(!gunPacks_.Equals(other.gunPacks_)) return false;
      if (Diamond != other.Diamond) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CurrentExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentExp);
      hash ^= equipmentPacks_.GetHashCode();
      hash ^= gunPacks_.GetHashCode();
      if (Diamond != 0L) hash ^= Diamond.GetHashCode();
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (CurrentExp != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CurrentExp);
      }
      equipmentPacks_.WriteTo(output, _repeated_equipmentPacks_codec);
      gunPacks_.WriteTo(output, _repeated_gunPacks_codec);
      if (Diamond != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Diamond);
      }
      if (Coin != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (CurrentExp != 0F) {
        size += 1 + 4;
      }
      size += equipmentPacks_.CalculateSize(_repeated_equipmentPacks_codec);
      size += gunPacks_.CalculateSize(_repeated_gunPacks_codec);
      if (Diamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CurrentExp != 0F) {
        CurrentExp = other.CurrentExp;
      }
      equipmentPacks_.Add(other.equipmentPacks_);
      gunPacks_.Add(other.gunPacks_);
      if (other.Diamond != 0L) {
        Diamond = other.Diamond;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 37: {
            CurrentExp = input.ReadFloat();
            break;
          }
          case 42: {
            equipmentPacks_.AddEntriesFrom(input, _repeated_equipmentPacks_codec);
            break;
          }
          case 50: {
            gunPacks_.AddEntriesFrom(input, _repeated_gunPacks_codec);
            break;
          }
          case 56: {
            Diamond = input.ReadInt64();
            break;
          }
          case 64: {
            Coin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentPack : pb::IMessage<EquipmentPack> {
    private static readonly pb::MessageParser<EquipmentPack> _parser = new pb::MessageParser<EquipmentPack>(() => new EquipmentPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack(EquipmentPack other) : this() {
      equipmentId_ = other.equipmentId_;
      equipmentName_ = other.equipmentName_;
      equipmentSuit_ = other.equipmentSuit_;
      equipmentQuality_ = other.equipmentQuality_;
      subProp1_ = other.subProp1_;
      subProp1Value_ = other.subProp1Value_;
      subProp2_ = other.subProp2_;
      subProp2Value_ = other.subProp2Value_;
      subProp3_ = other.subProp3_;
      subProp3Value_ = other.subProp3Value_;
      talent1_ = other.talent1_;
      talent2_ = other.talent2_;
      using_ = other.using_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack Clone() {
      return new EquipmentPack(this);
    }

    /// <summary>Field number for the "EquipmentId" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private int equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentName" field.</summary>
    public const int EquipmentNameFieldNumber = 2;
    private global::SocketProtocol.EEquipmentName equipmentName_ = global::SocketProtocol.EEquipmentName.Test1Name;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentName EquipmentName {
      get { return equipmentName_; }
      set {
        equipmentName_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentSuit" field.</summary>
    public const int EquipmentSuitFieldNumber = 3;
    private global::SocketProtocol.EEquipmentSuit equipmentSuit_ = global::SocketProtocol.EEquipmentSuit.Test1Suit;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentSuit EquipmentSuit {
      get { return equipmentSuit_; }
      set {
        equipmentSuit_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentQuality" field.</summary>
    public const int EquipmentQualityFieldNumber = 4;
    private global::SocketProtocol.EEquipmentQuality equipmentQuality_ = global::SocketProtocol.EEquipmentQuality.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentQuality EquipmentQuality {
      get { return equipmentQuality_; }
      set {
        equipmentQuality_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1" field.</summary>
    public const int SubProp1FieldNumber = 5;
    private global::SocketProtocol.ESubProp subProp1_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp1 {
      get { return subProp1_; }
      set {
        subProp1_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1Value" field.</summary>
    public const int SubProp1ValueFieldNumber = 6;
    private float subProp1Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1Value {
      get { return subProp1Value_; }
      set {
        subProp1Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2" field.</summary>
    public const int SubProp2FieldNumber = 7;
    private global::SocketProtocol.ESubProp subProp2_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp2 {
      get { return subProp2_; }
      set {
        subProp2_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2Value" field.</summary>
    public const int SubProp2ValueFieldNumber = 8;
    private float subProp2Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2Value {
      get { return subProp2Value_; }
      set {
        subProp2Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3" field.</summary>
    public const int SubProp3FieldNumber = 9;
    private global::SocketProtocol.ESubProp subProp3_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp3 {
      get { return subProp3_; }
      set {
        subProp3_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3Value" field.</summary>
    public const int SubProp3ValueFieldNumber = 10;
    private float subProp3Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3Value {
      get { return subProp3Value_; }
      set {
        subProp3Value_ = value;
      }
    }

    /// <summary>Field number for the "Talent1" field.</summary>
    public const int Talent1FieldNumber = 11;
    private global::SocketProtocol.EEquipmentTalent talent1_ = global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentTalent Talent1 {
      get { return talent1_; }
      set {
        talent1_ = value;
      }
    }

    /// <summary>Field number for the "Talent2" field.</summary>
    public const int Talent2FieldNumber = 12;
    private global::SocketProtocol.EEquipmentTalent talent2_ = global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentTalent Talent2 {
      get { return talent2_; }
      set {
        talent2_ = value;
      }
    }

    /// <summary>Field number for the "Using" field.</summary>
    public const int UsingFieldNumber = 13;
    private global::SocketProtocol.EUsing using_ = global::SocketProtocol.EUsing.No;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EUsing Using {
      get { return using_; }
      set {
        using_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipmentId != other.EquipmentId) return false;
      if (EquipmentName != other.EquipmentName) return false;
      if (EquipmentSuit != other.EquipmentSuit) return false;
      if (EquipmentQuality != other.EquipmentQuality) return false;
      if (SubProp1 != other.SubProp1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1Value, other.SubProp1Value)) return false;
      if (SubProp2 != other.SubProp2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2Value, other.SubProp2Value)) return false;
      if (SubProp3 != other.SubProp3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3Value, other.SubProp3Value)) return false;
      if (Talent1 != other.Talent1) return false;
      if (Talent2 != other.Talent2) return false;
      if (Using != other.Using) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipmentId != 0) hash ^= EquipmentId.GetHashCode();
      if (EquipmentName != global::SocketProtocol.EEquipmentName.Test1Name) hash ^= EquipmentName.GetHashCode();
      if (EquipmentSuit != global::SocketProtocol.EEquipmentSuit.Test1Suit) hash ^= EquipmentSuit.GetHashCode();
      if (EquipmentQuality != global::SocketProtocol.EEquipmentQuality.Normal) hash ^= EquipmentQuality.GetHashCode();
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp1.GetHashCode();
      if (SubProp1Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1Value);
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp2.GetHashCode();
      if (SubProp2Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2Value);
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp3.GetHashCode();
      if (SubProp3Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3Value);
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) hash ^= Talent1.GetHashCode();
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) hash ^= Talent2.GetHashCode();
      if (Using != global::SocketProtocol.EUsing.No) hash ^= Using.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipmentId);
      }
      if (EquipmentName != global::SocketProtocol.EEquipmentName.Test1Name) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EquipmentName);
      }
      if (EquipmentSuit != global::SocketProtocol.EEquipmentSuit.Test1Suit) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EquipmentSuit);
      }
      if (EquipmentQuality != global::SocketProtocol.EEquipmentQuality.Normal) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EquipmentQuality);
      }
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SubProp1);
      }
      if (SubProp1Value != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SubProp1Value);
      }
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SubProp2);
      }
      if (SubProp2Value != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SubProp2Value);
      }
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SubProp3);
      }
      if (SubProp3Value != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SubProp3Value);
      }
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Talent1);
      }
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Talent2);
      }
      if (Using != global::SocketProtocol.EUsing.No) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Using);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipmentId);
      }
      if (EquipmentName != global::SocketProtocol.EEquipmentName.Test1Name) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EquipmentName);
      }
      if (EquipmentSuit != global::SocketProtocol.EEquipmentSuit.Test1Suit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EquipmentSuit);
      }
      if (EquipmentQuality != global::SocketProtocol.EEquipmentQuality.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EquipmentQuality);
      }
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp1);
      }
      if (SubProp1Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp2);
      }
      if (SubProp2Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp3);
      }
      if (SubProp3Value != 0F) {
        size += 1 + 4;
      }
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Talent1);
      }
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Talent2);
      }
      if (Using != global::SocketProtocol.EUsing.No) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Using);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentPack other) {
      if (other == null) {
        return;
      }
      if (other.EquipmentId != 0) {
        EquipmentId = other.EquipmentId;
      }
      if (other.EquipmentName != global::SocketProtocol.EEquipmentName.Test1Name) {
        EquipmentName = other.EquipmentName;
      }
      if (other.EquipmentSuit != global::SocketProtocol.EEquipmentSuit.Test1Suit) {
        EquipmentSuit = other.EquipmentSuit;
      }
      if (other.EquipmentQuality != global::SocketProtocol.EEquipmentQuality.Normal) {
        EquipmentQuality = other.EquipmentQuality;
      }
      if (other.SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp1 = other.SubProp1;
      }
      if (other.SubProp1Value != 0F) {
        SubProp1Value = other.SubProp1Value;
      }
      if (other.SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp2 = other.SubProp2;
      }
      if (other.SubProp2Value != 0F) {
        SubProp2Value = other.SubProp2Value;
      }
      if (other.SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp3 = other.SubProp3;
      }
      if (other.SubProp3Value != 0F) {
        SubProp3Value = other.SubProp3Value;
      }
      if (other.Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        Talent1 = other.Talent1;
      }
      if (other.Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        Talent2 = other.Talent2;
      }
      if (other.Using != global::SocketProtocol.EUsing.No) {
        Using = other.Using;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EquipmentId = input.ReadInt32();
            break;
          }
          case 16: {
            EquipmentName = (global::SocketProtocol.EEquipmentName) input.ReadEnum();
            break;
          }
          case 24: {
            EquipmentSuit = (global::SocketProtocol.EEquipmentSuit) input.ReadEnum();
            break;
          }
          case 32: {
            EquipmentQuality = (global::SocketProtocol.EEquipmentQuality) input.ReadEnum();
            break;
          }
          case 40: {
            SubProp1 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 53: {
            SubProp1Value = input.ReadFloat();
            break;
          }
          case 56: {
            SubProp2 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 69: {
            SubProp2Value = input.ReadFloat();
            break;
          }
          case 72: {
            SubProp3 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 85: {
            SubProp3Value = input.ReadFloat();
            break;
          }
          case 88: {
            Talent1 = (global::SocketProtocol.EEquipmentTalent) input.ReadEnum();
            break;
          }
          case 96: {
            Talent2 = (global::SocketProtocol.EEquipmentTalent) input.ReadEnum();
            break;
          }
          case 104: {
            Using = (global::SocketProtocol.EUsing) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GunPack : pb::IMessage<GunPack> {
    private static readonly pb::MessageParser<GunPack> _parser = new pb::MessageParser<GunPack>(() => new GunPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GunPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack(GunPack other) : this() {
      gunId_ = other.gunId_;
      gunName_ = other.gunName_;
      gunType_ = other.gunType_;
      baseDMG_ = other.baseDMG_;
      firingRate_ = other.firingRate_;
      currentFiringRatePerSecond_ = other.currentFiringRatePerSecond_;
      magazine_ = other.magazine_;
      magazineCount_ = other.magazineCount_;
      coreProp_ = other.coreProp_;
      corePropValue_ = other.corePropValue_;
      subProp1_ = other.subProp1_;
      subProp1Value_ = other.subProp1Value_;
      subProp2_ = other.subProp2_;
      subProp2Value_ = other.subProp2Value_;
      subProp3_ = other.subProp3_;
      subProp3Value_ = other.subProp3Value_;
      using_ = other.using_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack Clone() {
      return new GunPack(this);
    }

    /// <summary>Field number for the "GunId" field.</summary>
    public const int GunIdFieldNumber = 1;
    private int gunId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunId {
      get { return gunId_; }
      set {
        gunId_ = value;
      }
    }

    /// <summary>Field number for the "GunName" field.</summary>
    public const int GunNameFieldNumber = 2;
    private global::SocketProtocol.EGunName gunName_ = global::SocketProtocol.EGunName.Ak47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EGunName GunName {
      get { return gunName_; }
      set {
        gunName_ = value;
      }
    }

    /// <summary>Field number for the "GunType" field.</summary>
    public const int GunTypeFieldNumber = 3;
    private global::SocketProtocol.EGunType gunType_ = global::SocketProtocol.EGunType.Ar;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EGunType GunType {
      get { return gunType_; }
      set {
        gunType_ = value;
      }
    }

    /// <summary>Field number for the "BaseDMG" field.</summary>
    public const int BaseDMGFieldNumber = 4;
    private float baseDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDMG {
      get { return baseDMG_; }
      set {
        baseDMG_ = value;
      }
    }

    /// <summary>Field number for the "FiringRate" field.</summary>
    public const int FiringRateFieldNumber = 5;
    private float firingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FiringRate {
      get { return firingRate_; }
      set {
        firingRate_ = value;
      }
    }

    /// <summary>Field number for the "CurrentFiringRatePerSecond" field.</summary>
    public const int CurrentFiringRatePerSecondFieldNumber = 6;
    private float currentFiringRatePerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentFiringRatePerSecond {
      get { return currentFiringRatePerSecond_; }
      set {
        currentFiringRatePerSecond_ = value;
      }
    }

    /// <summary>Field number for the "Magazine" field.</summary>
    public const int MagazineFieldNumber = 7;
    private int magazine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magazine {
      get { return magazine_; }
      set {
        magazine_ = value;
      }
    }

    /// <summary>Field number for the "MagazineCount" field.</summary>
    public const int MagazineCountFieldNumber = 8;
    private int magazineCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagazineCount {
      get { return magazineCount_; }
      set {
        magazineCount_ = value;
      }
    }

    /// <summary>Field number for the "CoreProp" field.</summary>
    public const int CorePropFieldNumber = 9;
    private global::SocketProtocol.EGunCoreProp coreProp_ = global::SocketProtocol.EGunCoreProp.AllDmgBonusCoreProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EGunCoreProp CoreProp {
      get { return coreProp_; }
      set {
        coreProp_ = value;
      }
    }

    /// <summary>Field number for the "CorePropValue" field.</summary>
    public const int CorePropValueFieldNumber = 10;
    private float corePropValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CorePropValue {
      get { return corePropValue_; }
      set {
        corePropValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1" field.</summary>
    public const int SubProp1FieldNumber = 11;
    private global::SocketProtocol.ESubProp subProp1_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp1 {
      get { return subProp1_; }
      set {
        subProp1_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1Value" field.</summary>
    public const int SubProp1ValueFieldNumber = 12;
    private float subProp1Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1Value {
      get { return subProp1Value_; }
      set {
        subProp1Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2" field.</summary>
    public const int SubProp2FieldNumber = 13;
    private global::SocketProtocol.ESubProp subProp2_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp2 {
      get { return subProp2_; }
      set {
        subProp2_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2Value" field.</summary>
    public const int SubProp2ValueFieldNumber = 14;
    private float subProp2Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2Value {
      get { return subProp2Value_; }
      set {
        subProp2Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3" field.</summary>
    public const int SubProp3FieldNumber = 15;
    private global::SocketProtocol.ESubProp subProp3_ = global::SocketProtocol.ESubProp.HealthSubProp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ESubProp SubProp3 {
      get { return subProp3_; }
      set {
        subProp3_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3Value" field.</summary>
    public const int SubProp3ValueFieldNumber = 16;
    private float subProp3Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3Value {
      get { return subProp3Value_; }
      set {
        subProp3Value_ = value;
      }
    }

    /// <summary>Field number for the "Using" field.</summary>
    public const int UsingFieldNumber = 17;
    private global::SocketProtocol.EUsing using_ = global::SocketProtocol.EUsing.No;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EUsing Using {
      get { return using_; }
      set {
        using_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GunPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GunPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunId != other.GunId) return false;
      if (GunName != other.GunName) return false;
      if (GunType != other.GunType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDMG, other.BaseDMG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FiringRate, other.FiringRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentFiringRatePerSecond, other.CurrentFiringRatePerSecond)) return false;
      if (Magazine != other.Magazine) return false;
      if (MagazineCount != other.MagazineCount) return false;
      if (CoreProp != other.CoreProp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CorePropValue, other.CorePropValue)) return false;
      if (SubProp1 != other.SubProp1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1Value, other.SubProp1Value)) return false;
      if (SubProp2 != other.SubProp2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2Value, other.SubProp2Value)) return false;
      if (SubProp3 != other.SubProp3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3Value, other.SubProp3Value)) return false;
      if (Using != other.Using) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunId != 0) hash ^= GunId.GetHashCode();
      if (GunName != global::SocketProtocol.EGunName.Ak47) hash ^= GunName.GetHashCode();
      if (GunType != global::SocketProtocol.EGunType.Ar) hash ^= GunType.GetHashCode();
      if (BaseDMG != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDMG);
      if (FiringRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FiringRate);
      if (CurrentFiringRatePerSecond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentFiringRatePerSecond);
      if (Magazine != 0) hash ^= Magazine.GetHashCode();
      if (MagazineCount != 0) hash ^= MagazineCount.GetHashCode();
      if (CoreProp != global::SocketProtocol.EGunCoreProp.AllDmgBonusCoreProp) hash ^= CoreProp.GetHashCode();
      if (CorePropValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CorePropValue);
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp1.GetHashCode();
      if (SubProp1Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1Value);
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp2.GetHashCode();
      if (SubProp2Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2Value);
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) hash ^= SubProp3.GetHashCode();
      if (SubProp3Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3Value);
      if (Using != global::SocketProtocol.EUsing.No) hash ^= Using.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GunId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunId);
      }
      if (GunName != global::SocketProtocol.EGunName.Ak47) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GunName);
      }
      if (GunType != global::SocketProtocol.EGunType.Ar) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GunType);
      }
      if (BaseDMG != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BaseDMG);
      }
      if (FiringRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FiringRate);
      }
      if (CurrentFiringRatePerSecond != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CurrentFiringRatePerSecond);
      }
      if (Magazine != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Magazine);
      }
      if (MagazineCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MagazineCount);
      }
      if (CoreProp != global::SocketProtocol.EGunCoreProp.AllDmgBonusCoreProp) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CoreProp);
      }
      if (CorePropValue != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CorePropValue);
      }
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SubProp1);
      }
      if (SubProp1Value != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(SubProp1Value);
      }
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(104);
        output.WriteEnum((int) SubProp2);
      }
      if (SubProp2Value != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SubProp2Value);
      }
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        output.WriteRawTag(120);
        output.WriteEnum((int) SubProp3);
      }
      if (SubProp3Value != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SubProp3Value);
      }
      if (Using != global::SocketProtocol.EUsing.No) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Using);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunId);
      }
      if (GunName != global::SocketProtocol.EGunName.Ak47) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GunName);
      }
      if (GunType != global::SocketProtocol.EGunType.Ar) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GunType);
      }
      if (BaseDMG != 0F) {
        size += 1 + 4;
      }
      if (FiringRate != 0F) {
        size += 1 + 4;
      }
      if (CurrentFiringRatePerSecond != 0F) {
        size += 1 + 4;
      }
      if (Magazine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magazine);
      }
      if (MagazineCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagazineCount);
      }
      if (CoreProp != global::SocketProtocol.EGunCoreProp.AllDmgBonusCoreProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CoreProp);
      }
      if (CorePropValue != 0F) {
        size += 1 + 4;
      }
      if (SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp1);
      }
      if (SubProp1Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp2);
      }
      if (SubProp2Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubProp3);
      }
      if (SubProp3Value != 0F) {
        size += 2 + 4;
      }
      if (Using != global::SocketProtocol.EUsing.No) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Using);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GunPack other) {
      if (other == null) {
        return;
      }
      if (other.GunId != 0) {
        GunId = other.GunId;
      }
      if (other.GunName != global::SocketProtocol.EGunName.Ak47) {
        GunName = other.GunName;
      }
      if (other.GunType != global::SocketProtocol.EGunType.Ar) {
        GunType = other.GunType;
      }
      if (other.BaseDMG != 0F) {
        BaseDMG = other.BaseDMG;
      }
      if (other.FiringRate != 0F) {
        FiringRate = other.FiringRate;
      }
      if (other.CurrentFiringRatePerSecond != 0F) {
        CurrentFiringRatePerSecond = other.CurrentFiringRatePerSecond;
      }
      if (other.Magazine != 0) {
        Magazine = other.Magazine;
      }
      if (other.MagazineCount != 0) {
        MagazineCount = other.MagazineCount;
      }
      if (other.CoreProp != global::SocketProtocol.EGunCoreProp.AllDmgBonusCoreProp) {
        CoreProp = other.CoreProp;
      }
      if (other.CorePropValue != 0F) {
        CorePropValue = other.CorePropValue;
      }
      if (other.SubProp1 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp1 = other.SubProp1;
      }
      if (other.SubProp1Value != 0F) {
        SubProp1Value = other.SubProp1Value;
      }
      if (other.SubProp2 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp2 = other.SubProp2;
      }
      if (other.SubProp2Value != 0F) {
        SubProp2Value = other.SubProp2Value;
      }
      if (other.SubProp3 != global::SocketProtocol.ESubProp.HealthSubProp) {
        SubProp3 = other.SubProp3;
      }
      if (other.SubProp3Value != 0F) {
        SubProp3Value = other.SubProp3Value;
      }
      if (other.Using != global::SocketProtocol.EUsing.No) {
        Using = other.Using;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunId = input.ReadInt32();
            break;
          }
          case 16: {
            GunName = (global::SocketProtocol.EGunName) input.ReadEnum();
            break;
          }
          case 24: {
            GunType = (global::SocketProtocol.EGunType) input.ReadEnum();
            break;
          }
          case 37: {
            BaseDMG = input.ReadFloat();
            break;
          }
          case 45: {
            FiringRate = input.ReadFloat();
            break;
          }
          case 53: {
            CurrentFiringRatePerSecond = input.ReadFloat();
            break;
          }
          case 56: {
            Magazine = input.ReadInt32();
            break;
          }
          case 64: {
            MagazineCount = input.ReadInt32();
            break;
          }
          case 72: {
            CoreProp = (global::SocketProtocol.EGunCoreProp) input.ReadEnum();
            break;
          }
          case 85: {
            CorePropValue = input.ReadFloat();
            break;
          }
          case 88: {
            SubProp1 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 101: {
            SubProp1Value = input.ReadFloat();
            break;
          }
          case 104: {
            SubProp2 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 117: {
            SubProp2Value = input.ReadFloat();
            break;
          }
          case 120: {
            SubProp3 = (global::SocketProtocol.ESubProp) input.ReadEnum();
            break;
          }
          case 133: {
            SubProp3Value = input.ReadFloat();
            break;
          }
          case 136: {
            Using = (global::SocketProtocol.EUsing) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendsPack : pb::IMessage<FriendsPack> {
    private static readonly pb::MessageParser<FriendsPack> _parser = new pb::MessageParser<FriendsPack>(() => new FriendsPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendsPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack(FriendsPack other) : this() {
      player1Uid_ = other.player1Uid_;
      player2Uid_ = other.player2Uid_;
      isFriend_ = other.isFriend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack Clone() {
      return new FriendsPack(this);
    }

    /// <summary>Field number for the "Player1Uid" field.</summary>
    public const int Player1UidFieldNumber = 1;
    private int player1Uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Uid {
      get { return player1Uid_; }
      set {
        player1Uid_ = value;
      }
    }

    /// <summary>Field number for the "Player2Uid" field.</summary>
    public const int Player2UidFieldNumber = 2;
    private int player2Uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Uid {
      get { return player2Uid_; }
      set {
        player2Uid_ = value;
      }
    }

    /// <summary>Field number for the "IsFriend" field.</summary>
    public const int IsFriendFieldNumber = 3;
    private int isFriend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFriend {
      get { return isFriend_; }
      set {
        isFriend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendsPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendsPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player1Uid != other.Player1Uid) return false;
      if (Player2Uid != other.Player2Uid) return false;
      if (IsFriend != other.IsFriend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player1Uid != 0) hash ^= Player1Uid.GetHashCode();
      if (Player2Uid != 0) hash ^= Player2Uid.GetHashCode();
      if (IsFriend != 0) hash ^= IsFriend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player1Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player1Uid);
      }
      if (Player2Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player2Uid);
      }
      if (IsFriend != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player1Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Uid);
      }
      if (Player2Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Uid);
      }
      if (IsFriend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFriend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendsPack other) {
      if (other == null) {
        return;
      }
      if (other.Player1Uid != 0) {
        Player1Uid = other.Player1Uid;
      }
      if (other.Player2Uid != 0) {
        Player2Uid = other.Player2Uid;
      }
      if (other.IsFriend != 0) {
        IsFriend = other.IsFriend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player1Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Player2Uid = input.ReadInt32();
            break;
          }
          case 24: {
            IsFriend = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRequestFriendPack : pb::IMessage<SendRequestFriendPack> {
    private static readonly pb::MessageParser<SendRequestFriendPack> _parser = new pb::MessageParser<SendRequestFriendPack>(() => new SendRequestFriendPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRequestFriendPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack(SendRequestFriendPack other) : this() {
      targetPlayerUid_ = other.targetPlayerUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack Clone() {
      return new SendRequestFriendPack(this);
    }

    /// <summary>Field number for the "TargetPlayerUid" field.</summary>
    public const int TargetPlayerUidFieldNumber = 1;
    private int targetPlayerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerUid {
      get { return targetPlayerUid_; }
      set {
        targetPlayerUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRequestFriendPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRequestFriendPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetPlayerUid != other.TargetPlayerUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetPlayerUid != 0) hash ^= TargetPlayerUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetPlayerUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetPlayerUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetPlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRequestFriendPack other) {
      if (other == null) {
        return;
      }
      if (other.TargetPlayerUid != 0) {
        TargetPlayerUid = other.TargetPlayerUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetPlayerUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
