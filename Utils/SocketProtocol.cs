// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SocketProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketProtocol {

  /// <summary>Holder for reflection information generated from SocketProtocol.proto</summary>
  public static partial class SocketProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SocketProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SocketProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRTb2NrZXRQcm90b2NvbC5wcm90bxIOU29ja2V0UHJvdG9jb2winQUKCE1h",
            "aW5QYWNrEjAKC1JlcXVlc3RDb2RlGAEgASgOMhsuU29ja2V0UHJvdG9jb2wu",
            "UmVxdWVzdENvZGUSLgoKQWN0aW9uQ29kZRgCIAEoDjIaLlNvY2tldFByb3Rv",
            "Y29sLkFjdGlvbkNvZGUSLgoKUmV0dXJuQ29kZRgDIAEoDjIaLlNvY2tldFBy",
            "b3RvY29sLlJldHVybkNvZGUSMgoMUmVnaXN0ZXJQYWNrGAQgASgLMhwuU29j",
            "a2V0UHJvdG9jb2wuUmVnaXN0ZXJQYWNrEiwKCUxvZ2luUGFjaxgFIAEoCzIZ",
            "LlNvY2tldFByb3RvY29sLkxvZ2luUGFjaxILCgNVaWQYBiABKAUSNgoOUGxh",
            "eWVySW5mb1BhY2sYByABKAsyHi5Tb2NrZXRQcm90b2NvbC5QbGF5ZXJJbmZv",
            "UGFjaxIwCgtGcmllbmRzUGFjaxgIIAMoCzIbLlNvY2tldFByb3RvY29sLkZy",
            "aWVuZHNQYWNrEkQKFVNlbmRSZXF1ZXN0RnJpZW5kUGFjaxgJIAEoCzIlLlNv",
            "Y2tldFByb3RvY29sLlNlbmRSZXF1ZXN0RnJpZW5kUGFjaxJCChRVcGRhdGVQ",
            "bGF5ZXJJbmZvUGFjaxgKIAMoCzIkLlNvY2tldFByb3RvY29sLlVwZGF0ZVBs",
            "YXllckluZm9QYWNrEjIKDFRlYW1tYXRlUGFjaxgLIAEoCzIcLlNvY2tldFBy",
            "b3RvY29sLlRlYW1tYXRlUGFjaxIyCgxTaG9wcGluZ1BhY2sYDCABKAsyHC5T",
            "b2NrZXRQcm90b2NvbC5TaG9wcGluZ1BhY2sSNAoNRXF1aXBJdGVtUGFjaxgN",
            "IAEoCzIdLlNvY2tldFByb3RvY29sLkVxdWlwSXRlbVBhY2siRQoMUmVnaXN0",
            "ZXJQYWNrEg8KB0FjY291bnQYASABKAkSEAoIUGFzc3dvcmQYAiABKAkSEgoK",
            "UGxheWVyTmFtZRgDIAEoCSI7CglMb2dpblBhY2sSCwoDVWlkGAEgASgFEg8K",
            "B0FjY291bnQYAiABKAkSEAoIUGFzc3dvcmQYAyABKAkioQIKDlBsYXllcklu",
            "Zm9QYWNrEgsKA1VpZBgBIAEoBRISCgpQbGF5ZXJOYW1lGAIgASgJEg0KBUxl",
            "dmVsGAMgASgFEhIKCkN1cnJlbnRFeHAYBCABKAISNQoORXF1aXBtZW50UGFj",
            "a3MYBSADKAsyHS5Tb2NrZXRQcm90b2NvbC5FcXVpcG1lbnRQYWNrEikKCEd1",
            "blBhY2tzGAYgAygLMhcuU29ja2V0UHJvdG9jb2wuR3VuUGFjaxIQCghJc09u",
            "bGluZRgHIAEoCBIOCgZJc1RlYW0YCCABKAgSFAoMSXNUZWFtTWFzdGVyGAkg",
            "ASgIEhIKCklzU2FtZVRlYW0YCiABKAgSDwoHRGlhbW9uZBgLIAEoAhIMCgRD",
            "b2luGAwgASgDIucBCgxUZWFtbWF0ZVBhY2sSEQoJU2VuZGVyVWlkGAEgASgF",
            "EhEKCVRhcmdldFVpZBgCIAEoBRINCgVTdGF0ZRgDIAEoBRIVCg1UZWFtTWFz",
            "dGVyVWlkGAQgASgFEhoKEkxlYXZlVGVhbVBsYXllclVpZBgFIAEoBRIZChFK",
            "b2luVGVhbVBsYXllclVpZBgGIAEoBRIVCg1UZWFtbWF0ZUNvdW50GAcgASgF",
            "EhIKClNlbmRlck5hbWUYCCABKAkSEgoKVGFyZ2V0TmFtZRgJIAEoCRIVCg1U",
            "ZWFtTWVtYmVyVWlkGAogASgFInQKDFNob3BwaW5nUGFjaxILCgNVaWQYASAB",
            "KAUSEQoJSXNEaWFtb25kGAIgASgIEg0KBVByaWNlGAMgASgCEg4KBkl0ZW1J",
            "ZBgEIAEoBRIUCgxEaWFtb25kUHJpY2UYBSABKAISDwoHUGVyY2VudBgGIAEo",
            "AiIsCg1FcXVpcEl0ZW1QYWNrEgsKA1VpZBgBIAEoBRIOCgZJdGVtSWQYAiAB",
            "KAUi8wMKFFVwZGF0ZVBsYXllckluZm9QYWNrEgsKA1VpZBgBIAEoBRISCgpQ",
            "bGF5ZXJOYW1lGAIgASgJEg0KBUxldmVsGAMgASgFEhEKCU1heEhlYWx0aBgE",
            "IAEoAhIQCghNYXhBcm1vchgFIAEoAhIVCg1DdXJyZW50SGVhbHRoGAYgASgC",
            "EhQKDEN1cnJlbnRBcm1vchgHIAEoAhIOCgZNYXhFeHAYCCABKAISEgoKQ3Vy",
            "cmVudEV4cBgJIAEoAhIYChBCYXNlRG1nUmF0ZUJvbnVzGAogASgCEhgKEENy",
            "aXREbWdSYXRlQm9udXMYCyABKAISGAoQSGVhZHNob3REbWdCb251cxgMIAEo",
            "AhISCgpQUmF0ZUJvbnVzGA0gASgCEhAKCEFiZUJvbnVzGA4gASgCEhIKCkFy",
            "RG1nQm9udXMYDyABKAISEwoLRG1yRG1nQm9udXMYECABKAISEwoLU21nRG1n",
            "Qm9udXMYESABKAISEgoKU2dEbWdCb251cxgSIAEoAhISCgpNZ0RtZ0JvbnVz",
            "GBMgASgCEhIKClNyRG1nQm9udXMYFCABKAISEgoKSGdEbWdCb251cxgVIAEo",
            "AhIPCgdEaWFtb25kGBYgASgCEgwKBENvaW4YFyABKAISFAoMQ3JpdERtZ0Jv",
            "bnVzGBggASgCIqoFCg1FcXVpcG1lbnRQYWNrEg4KBkl0ZW1JZBgBIAEoBRIV",
            "Cg1FcXVpcG1lbnROYW1lGAIgASgJEhUKDUVxdWlwbWVudFN1aXQYAyABKAkS",
            "EAoIU3ViUHJvcDEYBCABKAkSFQoNU3ViUHJvcDFWYWx1ZRgFIAEoAhIQCghT",
            "dWJQcm9wMhgGIAEoCRIVCg1TdWJQcm9wMlZhbHVlGAcgASgCEhAKCFN1YlBy",
            "b3AzGAggASgJEhUKDVN1YlByb3AzVmFsdWUYCSABKAISMQoHVGFsZW50MRgK",
            "IAEoDjIgLlNvY2tldFByb3RvY29sLkVFcXVpcG1lbnRUYWxlbnQSMQoHVGFs",
            "ZW50MhgLIAEoDjIgLlNvY2tldFByb3RvY29sLkVFcXVpcG1lbnRUYWxlbnQS",
            "CwoDVXNlGAwgASgIEg0KBUJsb2NrGA0gASgIEg0KBVByaWNlGA4gASgCEhAK",
            "CEl0ZW1UeXBlGA8gASgJEhQKDFN1YlByb3AxVHlwZRgQIAEoBRIUCgxTdWJQ",
            "cm9wMlR5cGUYESABKAUSFAoMU3ViUHJvcDNUeXBlGBIgASgFEhMKC0hlYWx0",
            "aEJvbnVzGBMgASgCEhQKDEJhc2VEbWdCb251cxgUIAEoAhIYChBDcml0RG1n",
            "UmF0ZUJvbnVzGBUgASgCEhQKDENyaXREbWdCb251cxgWIAEoAhIYChBIZWFk",
            "c2hvdERtZ0JvbnVzGBcgASgCEhIKClBSYXRlQm9udXMYGCABKAISEAoIQWJl",
            "Qm9udXMYGSABKAISEgoKQXJtb3JCb251cxgaIAEoAhIYChBTdWJQcm9wMU1h",
            "eFZhbHVlGBsgASgCEhgKEFN1YlByb3AyTWF4VmFsdWUYHCABKAISGAoQU3Vi",
            "UHJvcDNNYXhWYWx1ZRgdIAEoAiLSBQoHR3VuUGFjaxIOCgZJdGVtSWQYASAB",
            "KAUSDwoHR3VuTmFtZRgCIAEoCRIQCghJdGVtVHlwZRgDIAEoCRIPCgdCYXNl",
            "RG1nGAQgASgCEhIKCkZpcmluZ1JhdGUYBSABKAISIgoaQ3VycmVudEZpcmlu",
            "Z1JhdGVQZXJTZWNvbmQYBiABKAISEAoITWFnYXppbmUYByABKAUSEAoIQ29y",
            "ZVByb3AYCCABKAkSFQoNQ29yZVByb3BWYWx1ZRgJIAEoAhIQCghTdWJQcm9w",
            "MRgKIAEoCRIVCg1TdWJQcm9wMVZhbHVlGAsgASgCEhAKCFN1YlByb3AyGAwg",
            "ASgJEhUKDVN1YlByb3AyVmFsdWUYDSABKAISEAoIU3ViUHJvcDMYDiABKAkS",
            "FQoNU3ViUHJvcDNWYWx1ZRgPIAEoAhILCgNVc2UYECABKAgSDQoFQmxvY2sY",
            "ESABKAgSDQoFUHJpY2UYEiABKAISFAoMU3ViUHJvcDFUeXBlGBMgASgFEhQK",
            "DFN1YlByb3AyVHlwZRgUIAEoBRIUCgxTdWJQcm9wM1R5cGUYFSABKAUSFAoM",
            "Q29yZVByb3BUeXBlGBYgASgFEhMKC0hlYWx0aEJvbnVzGBcgASgCEhQKDEJh",
            "c2VEbWdCb251cxgYIAEoAhIYChBDcml0RG1nUmF0ZUJvbnVzGBkgASgCEhQK",
            "DENyaXREbWdCb251cxgaIAEoAhIYChBIZWFkc2hvdERtZ0JvbnVzGBsgASgC",
            "EhIKClBSYXRlQm9udXMYHCABKAISEAoIQWJlQm9udXMYHSABKAISEgoKQXJt",
            "b3JCb251cxgeIAEoAhIYChBTdWJQcm9wMU1heFZhbHVlGB8gASgCEhgKEFN1",
            "YlByb3AyTWF4VmFsdWUYICABKAISGAoQU3ViUHJvcDNNYXhWYWx1ZRghIAEo",
            "AhIVCg1SZWxvYWRpbmdUaW1lGCIgASgCIkcKC0ZyaWVuZHNQYWNrEhIKClBs",
            "YXllcjFVaWQYASABKAUSEgoKUGxheWVyMlVpZBgCIAEoBRIQCghJc0ZyaWVu",
            "ZBgDIAEoBSIwChVTZW5kUmVxdWVzdEZyaWVuZFBhY2sSFwoPVGFyZ2V0UGxh",
            "eWVyVWlkGAEgASgFKkoKC1JlcXVlc3RDb2RlEg8KC1JlcXVlc3ROb25lEAAS",
            "CAoEVXNlchABEgoKBkdhbWluZxACEggKBFRlYW0QAxIKCgZGcmllbmQQBCrS",
            "BgoKQWN0aW9uQ29kZRIOCgpBY3Rpb25Ob25lEAASDAoIUmVnaXN0ZXIQARIJ",
            "CgVMb2dpbhACEhIKDkluaXRQbGF5ZXJJbmZvEAMSEgoOQWNjZXB0Sm9pblRl",
            "YW0QBBIOCgpVcGRhdGVUZWFtEAUSDQoJTGVhdmVUZWFtEAYSFAoQVXBkYXRl",
            "UGxheWVySW5mbxAHEg8KC1JlYWR5QXR0YWNrEAgSDwoLU3RhcnRBdHRhY2sQ",
            "CRINCglOZXh0RW5lbXkQChINCglFbmRBdHRhY2sQCxIMCghFeGl0R2FtZRAM",
            "Eg0KCUJyZWFrVGVhbRANEg4KCkdldEZyaWVuZHMQDhIUChBHZXRGcmllbmRS",
            "ZXF1ZXN0EA8SEAoMU2VhcmNoRnJpZW5kEBASFQoRU2VuZFJlcXVlc3RGcmll",
            "bmQQERIVChFHZXRQbGF5ZXJCYXNlSW5mbxASEhAKDERlbGV0ZUZyaWVuZBAT",
            "EhcKE0FjY2VwdEZyaWVuZFJlcXVlc3QQFBIXChNSZWZ1c2VGcmllbmRSZXF1",
            "ZXN0EBUSDgoKSW52aXRlVGVhbRAWEg8KC0ludml0ZWRUZWFtEBcSEwoPSm9p",
            "blRlYW1SZXF1ZXN0EBgSFAoQQWNjZXB0SW52aXRlVGVhbRAZEhYKEkFjY2Vw",
            "dGVkSW52aXRlVGVhbRAaEhQKEFJlZnVzZUludml0ZVRlYW0QGxIVChFSZWZ1",
            "c2VkSW52aXRlVGVhbRAcEg4KCktpY2tQbGF5ZXIQHRIQCgxHZXRUZWFtbWF0",
            "ZXMQHhIVChFUZWFtbWF0ZUxlYXZlVGVhbRAfEhIKDlBsYXllckpvaW5UZWFt",
            "ECASFAoQQWNjZXB0ZWRKb2luVGVhbRAhEhIKDlJlZnVzZUpvaW5UZWFtECIS",
            "EwoPUmVmdXNlZEpvaW5UZWFtECMSEwoPQmVLaWNrZWRPdXRUZWFtECQSEAoM",
            "UmVnZW5lcmF0aW9uECUSDAoIU2hvcHBpbmcQJhIPCgtHZXRJdGVtSW5mbxAn",
            "EhYKElJlZnJlc2hJdGVtU3ViUHJvcBAoEg0KCUVxdWlwSXRlbRApEhYKElJl",
            "ZnJlc2hHdW5Db3JlUHJvcBAqEhUKEVVubG9ja0l0ZW1TdWJQcm9wECsqZQoK",
            "UmV0dXJuQ29kZRIOCgpSZXR1cm5Ob25lEAASCwoHU3VjY2VzcxABEggKBEZh",
            "aWwQAhITCg9SZXBlYXRlZFJlcXVlc3QQAxIMCghOb3RGb3VuZBAEEg0KCUlu",
            "Y29ycmVjdBAFKlAKCEVHdW5OYW1lEggKBEFLNDcQABIHCgNTTDcQARIHCgNN",
            "UDUQAhIICgRNNzAwEAMSBwoDTTYwEAQSCgoGU1BBUzEyEAUSCQoFTTE5MTEQ",
            "BipECghFR3VuVHlwZRIGCgJBUhAAEgcKA0RNUhABEgcKA1NNRxACEgYKAlNH",
            "EAMSBgoCU1IQBBIGCgJNRxAFEgYKAkhHEAYq5wEKDEVHdW5Db3JlUHJvcBIX",
            "ChNhbGxEbWdCb251c0NvcmVQcm9wEAASFgoSYXJEbWdCb251c0NvcmVQcm9w",
            "EAESFwoTZG1yRG1nQm9udXNDb3JlUHJvcBACEhcKE3NtZ0RtZ0JvbnVzQ29y",
            "ZVByb3AQAxIWChJzZ0RtZ0JvbnVzQ29yZVByb3AQBBIWChJzckRtZ0JvbnVz",
            "Q29yZVByb3AQBRIWChJtZ0RtZ0JvbnVzQ29yZVByb3AQBhIWChJoZ0RtZ0Jv",
            "bnVzQ29yZVByb3AQBxIUChBFR3VuQ29yZVByb3BOdWxsEAgqSwoORUVxdWlw",
            "bWVudFN1aXQSDQoJVGVzdDFTdWl0EAASDQoJVGVzdDJTdWl0EAESDQoJVGVz",
            "dDNTdWl0EAISDAoITnVsbFN1aXQQAyqtAgoORUVxdWlwbWVudE5hbWUSEAoM",
            "RGVmYXVsdEFybW9yEAASDwoLRGVmYXVsdEhlYWQQARIPCgtEZWZhdWx0SGFu",
            "ZBACEg8KC0RlZmF1bHRLbmVlEAMSDgoKRGVmYXVsdExlZxAEEhAKDERlZmF1",
            "bHRCb290cxAFEg4KClRlc3QxQXJtb3IQBhINCglUZXN0MUhlYWQQBxINCglU",
            "ZXN0MUhhbmQQCBINCglUZXN0MUtuZWUQCRIMCghUZXN0MUxlZxAKEg4KClRl",
            "c3QxQm9vdHMQCxIOCgpUZXN0MkFybW9yEAwSDQoJVGVzdDJIZWFkEA0SDQoJ",
            "VGVzdDJIYW5kEA4SDQoJVGVzdDJLbmVlEA8SDAoIVGVzdDJMZWcQEBIOCgpU",
            "ZXN0MkJvb3RzEBEq5AIKCEVTdWJQcm9wEhEKDWhlYWx0aFN1YlByb3AQABIX",
            "ChNiYXNlRG1nQm9udXNTdWJQcm9wEAESGAoUY0RtZ1JhdGVCb251c1N1YlBy",
            "b3AQAhIUChBjRG1nQm9udXNTdWJQcm9wEAMSGwoXaGVhZHNob3REbWdCb251",
            "c1N1YlByb3AQBBIVChFwUmF0ZUJvbnVzU3ViUHJvcBAFEhMKD2FiZUJvbnVz",
            "U3ViUHJvcBAGEhUKEWFyRG1nQm9udXNTdWJQcm9wEAcSFgoSZG1yRG1nQm9u",
            "dXNTdWJQcm9wEAgSFgoSc21nRG1nQm9udXNTdWJQcm9wEAkSFQoRc2dEbWdC",
            "b251c1N1YlByb3AQChIVChFzckRtZ0JvbnVzU3ViUHJvcBALEhUKEW1nRG1n",
            "Qm9udXNTdWJQcm9wEAwSFQoRaGdEbWdCb251c1N1YlByb3AQDRIQCgxFU3Vi",
            "UHJvcE51bGwQDipIChBFRXF1aXBtZW50VGFsZW50EhkKFVRlc3QxRXF1aXBt",
            "ZW50VGFsZW50MRAAEhkKFVRlc3QxRXF1aXBtZW50VGFsZW50MhABYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SocketProtocol.RequestCode), typeof(global::SocketProtocol.ActionCode), typeof(global::SocketProtocol.ReturnCode), typeof(global::SocketProtocol.EGunName), typeof(global::SocketProtocol.EGunType), typeof(global::SocketProtocol.EGunCoreProp), typeof(global::SocketProtocol.EEquipmentSuit), typeof(global::SocketProtocol.EEquipmentName), typeof(global::SocketProtocol.ESubProp), typeof(global::SocketProtocol.EEquipmentTalent), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.MainPack), global::SocketProtocol.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "RegisterPack", "LoginPack", "Uid", "PlayerInfoPack", "FriendsPack", "SendRequestFriendPack", "UpdatePlayerInfoPack", "TeammatePack", "ShoppingPack", "EquipItemPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.RegisterPack), global::SocketProtocol.RegisterPack.Parser, new[]{ "Account", "Password", "PlayerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.LoginPack), global::SocketProtocol.LoginPack.Parser, new[]{ "Uid", "Account", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.PlayerInfoPack), global::SocketProtocol.PlayerInfoPack.Parser, new[]{ "Uid", "PlayerName", "Level", "CurrentExp", "EquipmentPacks", "GunPacks", "IsOnline", "IsTeam", "IsTeamMaster", "IsSameTeam", "Diamond", "Coin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.TeammatePack), global::SocketProtocol.TeammatePack.Parser, new[]{ "SenderUid", "TargetUid", "State", "TeamMasterUid", "LeaveTeamPlayerUid", "JoinTeamPlayerUid", "TeammateCount", "SenderName", "TargetName", "TeamMemberUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.ShoppingPack), global::SocketProtocol.ShoppingPack.Parser, new[]{ "Uid", "IsDiamond", "Price", "ItemId", "DiamondPrice", "Percent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.EquipItemPack), global::SocketProtocol.EquipItemPack.Parser, new[]{ "Uid", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.UpdatePlayerInfoPack), global::SocketProtocol.UpdatePlayerInfoPack.Parser, new[]{ "Uid", "PlayerName", "Level", "MaxHealth", "MaxArmor", "CurrentHealth", "CurrentArmor", "MaxExp", "CurrentExp", "BaseDmgRateBonus", "CritDmgRateBonus", "HeadshotDmgBonus", "PRateBonus", "AbeBonus", "ArDmgBonus", "DmrDmgBonus", "SmgDmgBonus", "SgDmgBonus", "MgDmgBonus", "SrDmgBonus", "HgDmgBonus", "Diamond", "Coin", "CritDmgBonus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.EquipmentPack), global::SocketProtocol.EquipmentPack.Parser, new[]{ "ItemId", "EquipmentName", "EquipmentSuit", "SubProp1", "SubProp1Value", "SubProp2", "SubProp2Value", "SubProp3", "SubProp3Value", "Talent1", "Talent2", "Use", "Block", "Price", "ItemType", "SubProp1Type", "SubProp2Type", "SubProp3Type", "HealthBonus", "BaseDmgBonus", "CritDmgRateBonus", "CritDmgBonus", "HeadshotDmgBonus", "PRateBonus", "AbeBonus", "ArmorBonus", "SubProp1MaxValue", "SubProp2MaxValue", "SubProp3MaxValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.GunPack), global::SocketProtocol.GunPack.Parser, new[]{ "ItemId", "GunName", "ItemType", "BaseDmg", "FiringRate", "CurrentFiringRatePerSecond", "Magazine", "CoreProp", "CorePropValue", "SubProp1", "SubProp1Value", "SubProp2", "SubProp2Value", "SubProp3", "SubProp3Value", "Use", "Block", "Price", "SubProp1Type", "SubProp2Type", "SubProp3Type", "CorePropType", "HealthBonus", "BaseDmgBonus", "CritDmgRateBonus", "CritDmgBonus", "HeadshotDmgBonus", "PRateBonus", "AbeBonus", "ArmorBonus", "SubProp1MaxValue", "SubProp2MaxValue", "SubProp3MaxValue", "ReloadingTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.FriendsPack), global::SocketProtocol.FriendsPack.Parser, new[]{ "Player1Uid", "Player2Uid", "IsFriend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketProtocol.SendRequestFriendPack), global::SocketProtocol.SendRequestFriendPack.Parser, new[]{ "TargetPlayerUid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    [pbr::OriginalName("User")] User = 1,
    [pbr::OriginalName("Gaming")] Gaming = 2,
    [pbr::OriginalName("Team")] Team = 3,
    [pbr::OriginalName("Friend")] Friend = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///注册
    /// </summary>
    [pbr::OriginalName("Register")] Register = 1,
    /// <summary>
    ///登陆
    /// </summary>
    [pbr::OriginalName("Login")] Login = 2,
    /// <summary>
    ///初始化玩家信息
    /// </summary>
    [pbr::OriginalName("InitPlayerInfo")] InitPlayerInfo = 3,
    /// <summary>
    ///加入小队
    /// </summary>
    [pbr::OriginalName("AcceptJoinTeam")] AcceptJoinTeam = 4,
    /// <summary>
    ///更新小队内信息
    /// </summary>
    [pbr::OriginalName("UpdateTeam")] UpdateTeam = 5,
    /// <summary>
    ///离开小队
    /// </summary>
    [pbr::OriginalName("LeaveTeam")] LeaveTeam = 6,
    /// <summary>
    ///更新玩家装备武器信息
    /// </summary>
    [pbr::OriginalName("UpdatePlayerInfo")] UpdatePlayerInfo = 7,
    /// <summary>
    ///出击准备就绪
    /// </summary>
    [pbr::OriginalName("ReadyAttack")] ReadyAttack = 8,
    /// <summary>
    ///开始出击
    /// </summary>
    [pbr::OriginalName("StartAttack")] StartAttack = 9,
    /// <summary>
    ///下一波敌人刷出
    /// </summary>
    [pbr::OriginalName("NextEnemy")] NextEnemy = 10,
    /// <summary>
    ///出击结束
    /// </summary>
    [pbr::OriginalName("EndAttack")] EndAttack = 11,
    /// <summary>
    ///退出游戏
    /// </summary>
    [pbr::OriginalName("ExitGame")] ExitGame = 12,
    /// <summary>
    ///解散小队
    /// </summary>
    [pbr::OriginalName("BreakTeam")] BreakTeam = 13,
    /// <summary>
    ///获取好友列表
    /// </summary>
    [pbr::OriginalName("GetFriends")] GetFriends = 14,
    /// <summary>
    ///获取申请好友请求列表
    /// </summary>
    [pbr::OriginalName("GetFriendRequest")] GetFriendRequest = 15,
    /// <summary>
    ///搜索玩家
    /// </summary>
    [pbr::OriginalName("SearchFriend")] SearchFriend = 16,
    /// <summary>
    ///发送申请好友请求
    /// </summary>
    [pbr::OriginalName("SendRequestFriend")] SendRequestFriend = 17,
    /// <summary>
    ///获取玩家基本信息
    /// </summary>
    [pbr::OriginalName("GetPlayerBaseInfo")] GetPlayerBaseInfo = 18,
    /// <summary>
    ///删除好友
    /// </summary>
    [pbr::OriginalName("DeleteFriend")] DeleteFriend = 19,
    /// <summary>
    ///接受好友申请请求
    /// </summary>
    [pbr::OriginalName("AcceptFriendRequest")] AcceptFriendRequest = 20,
    /// <summary>
    ///拒绝好友申请请求
    /// </summary>
    [pbr::OriginalName("RefuseFriendRequest")] RefuseFriendRequest = 21,
    /// <summary>
    ///邀请其他玩家加入小队
    /// </summary>
    [pbr::OriginalName("InviteTeam")] InviteTeam = 22,
    /// <summary>
    ///被其他玩家邀请加入小队
    /// </summary>
    [pbr::OriginalName("InvitedTeam")] InvitedTeam = 23,
    /// <summary>
    ///请求加入小队
    /// </summary>
    [pbr::OriginalName("JoinTeamRequest")] JoinTeamRequest = 24,
    /// <summary>
    ///接受入队邀请
    /// </summary>
    [pbr::OriginalName("AcceptInviteTeam")] AcceptInviteTeam = 25,
    /// <summary>
    ///目标玩家接受入队邀请
    /// </summary>
    [pbr::OriginalName("AcceptedInviteTeam")] AcceptedInviteTeam = 26,
    /// <summary>
    ///拒绝入队邀请
    /// </summary>
    [pbr::OriginalName("RefuseInviteTeam")] RefuseInviteTeam = 27,
    /// <summary>
    ///目标玩家拒绝入队邀请
    /// </summary>
    [pbr::OriginalName("RefusedInviteTeam")] RefusedInviteTeam = 28,
    /// <summary>
    ///作为队长时 将玩家踢出小队
    /// </summary>
    [pbr::OriginalName("KickPlayer")] KickPlayer = 29,
    /// <summary>
    ///在小队中时获取小队成员
    /// </summary>
    [pbr::OriginalName("GetTeammates")] GetTeammates = 30,
    /// <summary>
    ///小队其他成员离开小队
    /// </summary>
    [pbr::OriginalName("TeammateLeaveTeam")] TeammateLeaveTeam = 31,
    /// <summary>
    ///通知给队长有人想入队
    /// </summary>
    [pbr::OriginalName("PlayerJoinTeam")] PlayerJoinTeam = 32,
    /// <summary>
    ///目标玩家被同意入队
    /// </summary>
    [pbr::OriginalName("AcceptedJoinTeam")] AcceptedJoinTeam = 33,
    /// <summary>
    ///拒绝其他玩家的请求加入小队
    /// </summary>
    [pbr::OriginalName("RefuseJoinTeam")] RefuseJoinTeam = 34,
    /// <summary>
    ///被队长拒绝加入小队
    /// </summary>
    [pbr::OriginalName("RefusedJoinTeam")] RefusedJoinTeam = 35,
    /// <summary>
    ///被踢出小队
    /// </summary>
    [pbr::OriginalName("BeKickedOutTeam")] BeKickedOutTeam = 36,
    /// <summary>
    ///生命恢复
    /// </summary>
    [pbr::OriginalName("Regeneration")] Regeneration = 37,
    /// <summary>
    ///购买物品
    /// </summary>
    [pbr::OriginalName("Shopping")] Shopping = 38,
    /// <summary>
    ///单独获取物品信息
    /// </summary>
    [pbr::OriginalName("GetItemInfo")] GetItemInfo = 39,
    /// <summary>
    ///刷新物品副词条
    /// </summary>
    [pbr::OriginalName("RefreshItemSubProp")] RefreshItemSubProp = 40,
    /// <summary>
    ///穿戴装备
    /// </summary>
    [pbr::OriginalName("EquipItem")] EquipItem = 41,
    /// <summary>
    ///刷新武器主词条
    /// </summary>
    [pbr::OriginalName("RefreshGunCoreProp")] RefreshGunCoreProp = 42,
    /// <summary>
    ///解锁物品副词条
    /// </summary>
    [pbr::OriginalName("UnlockItemSubProp")] UnlockItemSubProp = 43,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Fail")] Fail = 2,
    [pbr::OriginalName("RepeatedRequest")] RepeatedRequest = 3,
    [pbr::OriginalName("NotFound")] NotFound = 4,
    [pbr::OriginalName("Incorrect")] Incorrect = 5,
  }

  public enum EGunName {
    [pbr::OriginalName("AK47")] Ak47 = 0,
    [pbr::OriginalName("SL7")] Sl7 = 1,
    [pbr::OriginalName("MP5")] Mp5 = 2,
    [pbr::OriginalName("M700")] M700 = 3,
    [pbr::OriginalName("M60")] M60 = 4,
    [pbr::OriginalName("SPAS12")] Spas12 = 5,
    [pbr::OriginalName("M1911")] M1911 = 6,
  }

  public enum EGunType {
    [pbr::OriginalName("AR")] Ar = 0,
    [pbr::OriginalName("DMR")] Dmr = 1,
    [pbr::OriginalName("SMG")] Smg = 2,
    [pbr::OriginalName("SG")] Sg = 3,
    [pbr::OriginalName("SR")] Sr = 4,
    [pbr::OriginalName("MG")] Mg = 5,
    [pbr::OriginalName("HG")] Hg = 6,
  }

  public enum EGunCoreProp {
    [pbr::OriginalName("allDmgBonusCoreProp")] AllDmgBonusCoreProp = 0,
    [pbr::OriginalName("arDmgBonusCoreProp")] ArDmgBonusCoreProp = 1,
    [pbr::OriginalName("dmrDmgBonusCoreProp")] DmrDmgBonusCoreProp = 2,
    [pbr::OriginalName("smgDmgBonusCoreProp")] SmgDmgBonusCoreProp = 3,
    [pbr::OriginalName("sgDmgBonusCoreProp")] SgDmgBonusCoreProp = 4,
    [pbr::OriginalName("srDmgBonusCoreProp")] SrDmgBonusCoreProp = 5,
    [pbr::OriginalName("mgDmgBonusCoreProp")] MgDmgBonusCoreProp = 6,
    [pbr::OriginalName("hgDmgBonusCoreProp")] HgDmgBonusCoreProp = 7,
    [pbr::OriginalName("EGunCorePropNull")] Null = 8,
  }

  public enum EEquipmentSuit {
    [pbr::OriginalName("Test1Suit")] Test1Suit = 0,
    [pbr::OriginalName("Test2Suit")] Test2Suit = 1,
    [pbr::OriginalName("Test3Suit")] Test3Suit = 2,
    [pbr::OriginalName("NullSuit")] NullSuit = 3,
  }

  public enum EEquipmentName {
    [pbr::OriginalName("DefaultArmor")] DefaultArmor = 0,
    [pbr::OriginalName("DefaultHead")] DefaultHead = 1,
    [pbr::OriginalName("DefaultHand")] DefaultHand = 2,
    [pbr::OriginalName("DefaultKnee")] DefaultKnee = 3,
    [pbr::OriginalName("DefaultLeg")] DefaultLeg = 4,
    [pbr::OriginalName("DefaultBoots")] DefaultBoots = 5,
    [pbr::OriginalName("Test1Armor")] Test1Armor = 6,
    [pbr::OriginalName("Test1Head")] Test1Head = 7,
    [pbr::OriginalName("Test1Hand")] Test1Hand = 8,
    [pbr::OriginalName("Test1Knee")] Test1Knee = 9,
    [pbr::OriginalName("Test1Leg")] Test1Leg = 10,
    [pbr::OriginalName("Test1Boots")] Test1Boots = 11,
    [pbr::OriginalName("Test2Armor")] Test2Armor = 12,
    [pbr::OriginalName("Test2Head")] Test2Head = 13,
    [pbr::OriginalName("Test2Hand")] Test2Hand = 14,
    [pbr::OriginalName("Test2Knee")] Test2Knee = 15,
    [pbr::OriginalName("Test2Leg")] Test2Leg = 16,
    [pbr::OriginalName("Test2Boots")] Test2Boots = 17,
  }

  public enum ESubProp {
    [pbr::OriginalName("healthSubProp")] HealthSubProp = 0,
    [pbr::OriginalName("baseDmgBonusSubProp")] BaseDmgBonusSubProp = 1,
    [pbr::OriginalName("cDmgRateBonusSubProp")] CDmgRateBonusSubProp = 2,
    [pbr::OriginalName("cDmgBonusSubProp")] CDmgBonusSubProp = 3,
    [pbr::OriginalName("headshotDmgBonusSubProp")] HeadshotDmgBonusSubProp = 4,
    [pbr::OriginalName("pRateBonusSubProp")] PRateBonusSubProp = 5,
    [pbr::OriginalName("abeBonusSubProp")] AbeBonusSubProp = 6,
    [pbr::OriginalName("arDmgBonusSubProp")] ArDmgBonusSubProp = 7,
    [pbr::OriginalName("dmrDmgBonusSubProp")] DmrDmgBonusSubProp = 8,
    [pbr::OriginalName("smgDmgBonusSubProp")] SmgDmgBonusSubProp = 9,
    [pbr::OriginalName("sgDmgBonusSubProp")] SgDmgBonusSubProp = 10,
    [pbr::OriginalName("srDmgBonusSubProp")] SrDmgBonusSubProp = 11,
    [pbr::OriginalName("mgDmgBonusSubProp")] MgDmgBonusSubProp = 12,
    [pbr::OriginalName("hgDmgBonusSubProp")] HgDmgBonusSubProp = 13,
    [pbr::OriginalName("ESubPropNull")] Null = 14,
  }

  public enum EEquipmentTalent {
    [pbr::OriginalName("Test1EquipmentTalent1")] Test1EquipmentTalent1 = 0,
    [pbr::OriginalName("Test1EquipmentTalent2")] Test1EquipmentTalent2 = 1,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      registerPack_ = other.registerPack_ != null ? other.registerPack_.Clone() : null;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      uid_ = other.uid_;
      playerInfoPack_ = other.playerInfoPack_ != null ? other.playerInfoPack_.Clone() : null;
      friendsPack_ = other.friendsPack_.Clone();
      sendRequestFriendPack_ = other.sendRequestFriendPack_ != null ? other.sendRequestFriendPack_.Clone() : null;
      updatePlayerInfoPack_ = other.updatePlayerInfoPack_.Clone();
      teammatePack_ = other.teammatePack_ != null ? other.teammatePack_.Clone() : null;
      shoppingPack_ = other.shoppingPack_ != null ? other.shoppingPack_.Clone() : null;
      equipItemPack_ = other.equipItemPack_ != null ? other.equipItemPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "RequestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SocketProtocol.RequestCode requestCode_ = global::SocketProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "ActionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SocketProtocol.ActionCode actionCode_ = global::SocketProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "ReturnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SocketProtocol.ReturnCode returnCode_ = global::SocketProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "RegisterPack" field.</summary>
    public const int RegisterPackFieldNumber = 4;
    private global::SocketProtocol.RegisterPack registerPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.RegisterPack RegisterPack {
      get { return registerPack_; }
      set {
        registerPack_ = value;
      }
    }

    /// <summary>Field number for the "LoginPack" field.</summary>
    public const int LoginPackFieldNumber = 5;
    private global::SocketProtocol.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 6;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerInfoPack" field.</summary>
    public const int PlayerInfoPackFieldNumber = 7;
    private global::SocketProtocol.PlayerInfoPack playerInfoPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.PlayerInfoPack PlayerInfoPack {
      get { return playerInfoPack_; }
      set {
        playerInfoPack_ = value;
      }
    }

    /// <summary>Field number for the "FriendsPack" field.</summary>
    public const int FriendsPackFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SocketProtocol.FriendsPack> _repeated_friendsPack_codec
        = pb::FieldCodec.ForMessage(66, global::SocketProtocol.FriendsPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.FriendsPack> friendsPack_ = new pbc::RepeatedField<global::SocketProtocol.FriendsPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.FriendsPack> FriendsPack {
      get { return friendsPack_; }
    }

    /// <summary>Field number for the "SendRequestFriendPack" field.</summary>
    public const int SendRequestFriendPackFieldNumber = 9;
    private global::SocketProtocol.SendRequestFriendPack sendRequestFriendPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.SendRequestFriendPack SendRequestFriendPack {
      get { return sendRequestFriendPack_; }
      set {
        sendRequestFriendPack_ = value;
      }
    }

    /// <summary>Field number for the "UpdatePlayerInfoPack" field.</summary>
    public const int UpdatePlayerInfoPackFieldNumber = 10;
    private static readonly pb::FieldCodec<global::SocketProtocol.UpdatePlayerInfoPack> _repeated_updatePlayerInfoPack_codec
        = pb::FieldCodec.ForMessage(82, global::SocketProtocol.UpdatePlayerInfoPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.UpdatePlayerInfoPack> updatePlayerInfoPack_ = new pbc::RepeatedField<global::SocketProtocol.UpdatePlayerInfoPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.UpdatePlayerInfoPack> UpdatePlayerInfoPack {
      get { return updatePlayerInfoPack_; }
    }

    /// <summary>Field number for the "TeammatePack" field.</summary>
    public const int TeammatePackFieldNumber = 11;
    private global::SocketProtocol.TeammatePack teammatePack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.TeammatePack TeammatePack {
      get { return teammatePack_; }
      set {
        teammatePack_ = value;
      }
    }

    /// <summary>Field number for the "ShoppingPack" field.</summary>
    public const int ShoppingPackFieldNumber = 12;
    private global::SocketProtocol.ShoppingPack shoppingPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.ShoppingPack ShoppingPack {
      get { return shoppingPack_; }
      set {
        shoppingPack_ = value;
      }
    }

    /// <summary>Field number for the "EquipItemPack" field.</summary>
    public const int EquipItemPackFieldNumber = 13;
    private global::SocketProtocol.EquipItemPack equipItemPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EquipItemPack EquipItemPack {
      get { return equipItemPack_; }
      set {
        equipItemPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(RegisterPack, other.RegisterPack)) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (Uid != other.Uid) return false;
      if (!object.Equals(PlayerInfoPack, other.PlayerInfoPack)) return false;
      if(!friendsPack_.Equals(other.friendsPack_)) return false;
      if (!object.Equals(SendRequestFriendPack, other.SendRequestFriendPack)) return false;
      if(!updatePlayerInfoPack_.Equals(other.updatePlayerInfoPack_)) return false;
      if (!object.Equals(TeammatePack, other.TeammatePack)) return false;
      if (!object.Equals(ShoppingPack, other.ShoppingPack)) return false;
      if (!object.Equals(EquipItemPack, other.EquipItemPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (registerPack_ != null) hash ^= RegisterPack.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (playerInfoPack_ != null) hash ^= PlayerInfoPack.GetHashCode();
      hash ^= friendsPack_.GetHashCode();
      if (sendRequestFriendPack_ != null) hash ^= SendRequestFriendPack.GetHashCode();
      hash ^= updatePlayerInfoPack_.GetHashCode();
      if (teammatePack_ != null) hash ^= TeammatePack.GetHashCode();
      if (shoppingPack_ != null) hash ^= ShoppingPack.GetHashCode();
      if (equipItemPack_ != null) hash ^= EquipItemPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (registerPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RegisterPack);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginPack);
      }
      if (Uid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Uid);
      }
      if (playerInfoPack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerInfoPack);
      }
      friendsPack_.WriteTo(output, _repeated_friendsPack_codec);
      if (sendRequestFriendPack_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SendRequestFriendPack);
      }
      updatePlayerInfoPack_.WriteTo(output, _repeated_updatePlayerInfoPack_codec);
      if (teammatePack_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TeammatePack);
      }
      if (shoppingPack_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ShoppingPack);
      }
      if (equipItemPack_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EquipItemPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (registerPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterPack);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (playerInfoPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfoPack);
      }
      size += friendsPack_.CalculateSize(_repeated_friendsPack_codec);
      if (sendRequestFriendPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendRequestFriendPack);
      }
      size += updatePlayerInfoPack_.CalculateSize(_repeated_updatePlayerInfoPack_codec);
      if (teammatePack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeammatePack);
      }
      if (shoppingPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShoppingPack);
      }
      if (equipItemPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipItemPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SocketProtocol.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SocketProtocol.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SocketProtocol.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.registerPack_ != null) {
        if (registerPack_ == null) {
          RegisterPack = new global::SocketProtocol.RegisterPack();
        }
        RegisterPack.MergeFrom(other.RegisterPack);
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SocketProtocol.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.playerInfoPack_ != null) {
        if (playerInfoPack_ == null) {
          PlayerInfoPack = new global::SocketProtocol.PlayerInfoPack();
        }
        PlayerInfoPack.MergeFrom(other.PlayerInfoPack);
      }
      friendsPack_.Add(other.friendsPack_);
      if (other.sendRequestFriendPack_ != null) {
        if (sendRequestFriendPack_ == null) {
          SendRequestFriendPack = new global::SocketProtocol.SendRequestFriendPack();
        }
        SendRequestFriendPack.MergeFrom(other.SendRequestFriendPack);
      }
      updatePlayerInfoPack_.Add(other.updatePlayerInfoPack_);
      if (other.teammatePack_ != null) {
        if (teammatePack_ == null) {
          TeammatePack = new global::SocketProtocol.TeammatePack();
        }
        TeammatePack.MergeFrom(other.TeammatePack);
      }
      if (other.shoppingPack_ != null) {
        if (shoppingPack_ == null) {
          ShoppingPack = new global::SocketProtocol.ShoppingPack();
        }
        ShoppingPack.MergeFrom(other.ShoppingPack);
      }
      if (other.equipItemPack_ != null) {
        if (equipItemPack_ == null) {
          EquipItemPack = new global::SocketProtocol.EquipItemPack();
        }
        EquipItemPack.MergeFrom(other.EquipItemPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SocketProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SocketProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SocketProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (registerPack_ == null) {
              RegisterPack = new global::SocketProtocol.RegisterPack();
            }
            input.ReadMessage(RegisterPack);
            break;
          }
          case 42: {
            if (loginPack_ == null) {
              LoginPack = new global::SocketProtocol.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 48: {
            Uid = input.ReadInt32();
            break;
          }
          case 58: {
            if (playerInfoPack_ == null) {
              PlayerInfoPack = new global::SocketProtocol.PlayerInfoPack();
            }
            input.ReadMessage(PlayerInfoPack);
            break;
          }
          case 66: {
            friendsPack_.AddEntriesFrom(input, _repeated_friendsPack_codec);
            break;
          }
          case 74: {
            if (sendRequestFriendPack_ == null) {
              SendRequestFriendPack = new global::SocketProtocol.SendRequestFriendPack();
            }
            input.ReadMessage(SendRequestFriendPack);
            break;
          }
          case 82: {
            updatePlayerInfoPack_.AddEntriesFrom(input, _repeated_updatePlayerInfoPack_codec);
            break;
          }
          case 90: {
            if (teammatePack_ == null) {
              TeammatePack = new global::SocketProtocol.TeammatePack();
            }
            input.ReadMessage(TeammatePack);
            break;
          }
          case 98: {
            if (shoppingPack_ == null) {
              ShoppingPack = new global::SocketProtocol.ShoppingPack();
            }
            input.ReadMessage(ShoppingPack);
            break;
          }
          case 106: {
            if (equipItemPack_ == null) {
              EquipItemPack = new global::SocketProtocol.EquipItemPack();
            }
            input.ReadMessage(EquipItemPack);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterPack : pb::IMessage<RegisterPack> {
    private static readonly pb::MessageParser<RegisterPack> _parser = new pb::MessageParser<RegisterPack>(() => new RegisterPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack(RegisterPack other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack Clone() {
      return new RegisterPack(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPack other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      uid_ = other.uid_;
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfoPack : pb::IMessage<PlayerInfoPack> {
    private static readonly pb::MessageParser<PlayerInfoPack> _parser = new pb::MessageParser<PlayerInfoPack>(() => new PlayerInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack(PlayerInfoPack other) : this() {
      uid_ = other.uid_;
      playerName_ = other.playerName_;
      level_ = other.level_;
      currentExp_ = other.currentExp_;
      equipmentPacks_ = other.equipmentPacks_.Clone();
      gunPacks_ = other.gunPacks_.Clone();
      isOnline_ = other.isOnline_;
      isTeam_ = other.isTeam_;
      isTeamMaster_ = other.isTeamMaster_;
      isSameTeam_ = other.isSameTeam_;
      diamond_ = other.diamond_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoPack Clone() {
      return new PlayerInfoPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExp" field.</summary>
    public const int CurrentExpFieldNumber = 4;
    private float currentExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentPacks" field.</summary>
    public const int EquipmentPacksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SocketProtocol.EquipmentPack> _repeated_equipmentPacks_codec
        = pb::FieldCodec.ForMessage(42, global::SocketProtocol.EquipmentPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.EquipmentPack> equipmentPacks_ = new pbc::RepeatedField<global::SocketProtocol.EquipmentPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.EquipmentPack> EquipmentPacks {
      get { return equipmentPacks_; }
    }

    /// <summary>Field number for the "GunPacks" field.</summary>
    public const int GunPacksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SocketProtocol.GunPack> _repeated_gunPacks_codec
        = pb::FieldCodec.ForMessage(50, global::SocketProtocol.GunPack.Parser);
    private readonly pbc::RepeatedField<global::SocketProtocol.GunPack> gunPacks_ = new pbc::RepeatedField<global::SocketProtocol.GunPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketProtocol.GunPack> GunPacks {
      get { return gunPacks_; }
    }

    /// <summary>Field number for the "IsOnline" field.</summary>
    public const int IsOnlineFieldNumber = 7;
    private bool isOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "IsTeam" field.</summary>
    public const int IsTeamFieldNumber = 8;
    private bool isTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeam {
      get { return isTeam_; }
      set {
        isTeam_ = value;
      }
    }

    /// <summary>Field number for the "IsTeamMaster" field.</summary>
    public const int IsTeamMasterFieldNumber = 9;
    private bool isTeamMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamMaster {
      get { return isTeamMaster_; }
      set {
        isTeamMaster_ = value;
      }
    }

    /// <summary>Field number for the "IsSameTeam" field.</summary>
    public const int IsSameTeamFieldNumber = 10;
    private bool isSameTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSameTeam {
      get { return isSameTeam_; }
      set {
        isSameTeam_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 11;
    private float diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 12;
    private long coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentExp, other.CurrentExp)) return false;
      if(!equipmentPacks_.Equals(other.equipmentPacks_)) return false;
      if(!gunPacks_.Equals(other.gunPacks_)) return false;
      if (IsOnline != other.IsOnline) return false;
      if (IsTeam != other.IsTeam) return false;
      if (IsTeamMaster != other.IsTeamMaster) return false;
      if (IsSameTeam != other.IsSameTeam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Diamond, other.Diamond)) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CurrentExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentExp);
      hash ^= equipmentPacks_.GetHashCode();
      hash ^= gunPacks_.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (IsTeam != false) hash ^= IsTeam.GetHashCode();
      if (IsTeamMaster != false) hash ^= IsTeamMaster.GetHashCode();
      if (IsSameTeam != false) hash ^= IsSameTeam.GetHashCode();
      if (Diamond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Diamond);
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (CurrentExp != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CurrentExp);
      }
      equipmentPacks_.WriteTo(output, _repeated_equipmentPacks_codec);
      gunPacks_.WriteTo(output, _repeated_gunPacks_codec);
      if (IsOnline != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsOnline);
      }
      if (IsTeam != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsTeam);
      }
      if (IsTeamMaster != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTeamMaster);
      }
      if (IsSameTeam != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsSameTeam);
      }
      if (Diamond != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Diamond);
      }
      if (Coin != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (CurrentExp != 0F) {
        size += 1 + 4;
      }
      size += equipmentPacks_.CalculateSize(_repeated_equipmentPacks_codec);
      size += gunPacks_.CalculateSize(_repeated_gunPacks_codec);
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (IsTeam != false) {
        size += 1 + 1;
      }
      if (IsTeamMaster != false) {
        size += 1 + 1;
      }
      if (IsSameTeam != false) {
        size += 1 + 1;
      }
      if (Diamond != 0F) {
        size += 1 + 4;
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CurrentExp != 0F) {
        CurrentExp = other.CurrentExp;
      }
      equipmentPacks_.Add(other.equipmentPacks_);
      gunPacks_.Add(other.gunPacks_);
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.IsTeam != false) {
        IsTeam = other.IsTeam;
      }
      if (other.IsTeamMaster != false) {
        IsTeamMaster = other.IsTeamMaster;
      }
      if (other.IsSameTeam != false) {
        IsSameTeam = other.IsSameTeam;
      }
      if (other.Diamond != 0F) {
        Diamond = other.Diamond;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 37: {
            CurrentExp = input.ReadFloat();
            break;
          }
          case 42: {
            equipmentPacks_.AddEntriesFrom(input, _repeated_equipmentPacks_codec);
            break;
          }
          case 50: {
            gunPacks_.AddEntriesFrom(input, _repeated_gunPacks_codec);
            break;
          }
          case 56: {
            IsOnline = input.ReadBool();
            break;
          }
          case 64: {
            IsTeam = input.ReadBool();
            break;
          }
          case 72: {
            IsTeamMaster = input.ReadBool();
            break;
          }
          case 80: {
            IsSameTeam = input.ReadBool();
            break;
          }
          case 93: {
            Diamond = input.ReadFloat();
            break;
          }
          case 96: {
            Coin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeammatePack : pb::IMessage<TeammatePack> {
    private static readonly pb::MessageParser<TeammatePack> _parser = new pb::MessageParser<TeammatePack>(() => new TeammatePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammatePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammatePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammatePack(TeammatePack other) : this() {
      senderUid_ = other.senderUid_;
      targetUid_ = other.targetUid_;
      state_ = other.state_;
      teamMasterUid_ = other.teamMasterUid_;
      leaveTeamPlayerUid_ = other.leaveTeamPlayerUid_;
      joinTeamPlayerUid_ = other.joinTeamPlayerUid_;
      teammateCount_ = other.teammateCount_;
      senderName_ = other.senderName_;
      targetName_ = other.targetName_;
      teamMemberUid_ = other.teamMemberUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammatePack Clone() {
      return new TeammatePack(this);
    }

    /// <summary>Field number for the "SenderUid" field.</summary>
    public const int SenderUidFieldNumber = 1;
    private int senderUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderUid {
      get { return senderUid_; }
      set {
        senderUid_ = value;
      }
    }

    /// <summary>Field number for the "TargetUid" field.</summary>
    public const int TargetUidFieldNumber = 2;
    private int targetUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUid {
      get { return targetUid_; }
      set {
        targetUid_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///0等待中 1成功 2被拒绝 3失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "TeamMasterUid" field.</summary>
    public const int TeamMasterUidFieldNumber = 4;
    private int teamMasterUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamMasterUid {
      get { return teamMasterUid_; }
      set {
        teamMasterUid_ = value;
      }
    }

    /// <summary>Field number for the "LeaveTeamPlayerUid" field.</summary>
    public const int LeaveTeamPlayerUidFieldNumber = 5;
    private int leaveTeamPlayerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaveTeamPlayerUid {
      get { return leaveTeamPlayerUid_; }
      set {
        leaveTeamPlayerUid_ = value;
      }
    }

    /// <summary>Field number for the "JoinTeamPlayerUid" field.</summary>
    public const int JoinTeamPlayerUidFieldNumber = 6;
    private int joinTeamPlayerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinTeamPlayerUid {
      get { return joinTeamPlayerUid_; }
      set {
        joinTeamPlayerUid_ = value;
      }
    }

    /// <summary>Field number for the "TeammateCount" field.</summary>
    public const int TeammateCountFieldNumber = 7;
    private int teammateCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeammateCount {
      get { return teammateCount_; }
      set {
        teammateCount_ = value;
      }
    }

    /// <summary>Field number for the "SenderName" field.</summary>
    public const int SenderNameFieldNumber = 8;
    private string senderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetName" field.</summary>
    public const int TargetNameFieldNumber = 9;
    private string targetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TeamMemberUid" field.</summary>
    public const int TeamMemberUidFieldNumber = 10;
    private int teamMemberUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamMemberUid {
      get { return teamMemberUid_; }
      set {
        teamMemberUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammatePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammatePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderUid != other.SenderUid) return false;
      if (TargetUid != other.TargetUid) return false;
      if (State != other.State) return false;
      if (TeamMasterUid != other.TeamMasterUid) return false;
      if (LeaveTeamPlayerUid != other.LeaveTeamPlayerUid) return false;
      if (JoinTeamPlayerUid != other.JoinTeamPlayerUid) return false;
      if (TeammateCount != other.TeammateCount) return false;
      if (SenderName != other.SenderName) return false;
      if (TargetName != other.TargetName) return false;
      if (TeamMemberUid != other.TeamMemberUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderUid != 0) hash ^= SenderUid.GetHashCode();
      if (TargetUid != 0) hash ^= TargetUid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (TeamMasterUid != 0) hash ^= TeamMasterUid.GetHashCode();
      if (LeaveTeamPlayerUid != 0) hash ^= LeaveTeamPlayerUid.GetHashCode();
      if (JoinTeamPlayerUid != 0) hash ^= JoinTeamPlayerUid.GetHashCode();
      if (TeammateCount != 0) hash ^= TeammateCount.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (TargetName.Length != 0) hash ^= TargetName.GetHashCode();
      if (TeamMemberUid != 0) hash ^= TeamMemberUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SenderUid);
      }
      if (TargetUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetUid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (TeamMasterUid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamMasterUid);
      }
      if (LeaveTeamPlayerUid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LeaveTeamPlayerUid);
      }
      if (JoinTeamPlayerUid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(JoinTeamPlayerUid);
      }
      if (TeammateCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TeammateCount);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SenderName);
      }
      if (TargetName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TargetName);
      }
      if (TeamMemberUid != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TeamMemberUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderUid);
      }
      if (TargetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (TeamMasterUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamMasterUid);
      }
      if (LeaveTeamPlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveTeamPlayerUid);
      }
      if (JoinTeamPlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinTeamPlayerUid);
      }
      if (TeammateCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeammateCount);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
      }
      if (TeamMemberUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamMemberUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeammatePack other) {
      if (other == null) {
        return;
      }
      if (other.SenderUid != 0) {
        SenderUid = other.SenderUid;
      }
      if (other.TargetUid != 0) {
        TargetUid = other.TargetUid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.TeamMasterUid != 0) {
        TeamMasterUid = other.TeamMasterUid;
      }
      if (other.LeaveTeamPlayerUid != 0) {
        LeaveTeamPlayerUid = other.LeaveTeamPlayerUid;
      }
      if (other.JoinTeamPlayerUid != 0) {
        JoinTeamPlayerUid = other.JoinTeamPlayerUid;
      }
      if (other.TeammateCount != 0) {
        TeammateCount = other.TeammateCount;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.TargetName.Length != 0) {
        TargetName = other.TargetName;
      }
      if (other.TeamMemberUid != 0) {
        TeamMemberUid = other.TeamMemberUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SenderUid = input.ReadInt32();
            break;
          }
          case 16: {
            TargetUid = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            TeamMasterUid = input.ReadInt32();
            break;
          }
          case 40: {
            LeaveTeamPlayerUid = input.ReadInt32();
            break;
          }
          case 48: {
            JoinTeamPlayerUid = input.ReadInt32();
            break;
          }
          case 56: {
            TeammateCount = input.ReadInt32();
            break;
          }
          case 66: {
            SenderName = input.ReadString();
            break;
          }
          case 74: {
            TargetName = input.ReadString();
            break;
          }
          case 80: {
            TeamMemberUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShoppingPack : pb::IMessage<ShoppingPack> {
    private static readonly pb::MessageParser<ShoppingPack> _parser = new pb::MessageParser<ShoppingPack>(() => new ShoppingPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingPack(ShoppingPack other) : this() {
      uid_ = other.uid_;
      isDiamond_ = other.isDiamond_;
      price_ = other.price_;
      itemId_ = other.itemId_;
      diamondPrice_ = other.diamondPrice_;
      percent_ = other.percent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingPack Clone() {
      return new ShoppingPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "IsDiamond" field.</summary>
    public const int IsDiamondFieldNumber = 2;
    private bool isDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDiamond {
      get { return isDiamond_; }
      set {
        isDiamond_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 4;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "DiamondPrice" field.</summary>
    public const int DiamondPriceFieldNumber = 5;
    private float diamondPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DiamondPrice {
      get { return diamondPrice_; }
      set {
        diamondPrice_ = value;
      }
    }

    /// <summary>Field number for the "Percent" field.</summary>
    public const int PercentFieldNumber = 6;
    private float percent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Percent {
      get { return percent_; }
      set {
        percent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (IsDiamond != other.IsDiamond) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (ItemId != other.ItemId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DiamondPrice, other.DiamondPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Percent, other.Percent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (IsDiamond != false) hash ^= IsDiamond.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (DiamondPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DiamondPrice);
      if (Percent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Percent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (IsDiamond != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDiamond);
      }
      if (Price != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Price);
      }
      if (ItemId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemId);
      }
      if (DiamondPrice != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DiamondPrice);
      }
      if (Percent != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Percent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (IsDiamond != false) {
        size += 1 + 1;
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (DiamondPrice != 0F) {
        size += 1 + 4;
      }
      if (Percent != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.IsDiamond != false) {
        IsDiamond = other.IsDiamond;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.DiamondPrice != 0F) {
        DiamondPrice = other.DiamondPrice;
      }
      if (other.Percent != 0F) {
        Percent = other.Percent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            IsDiamond = input.ReadBool();
            break;
          }
          case 29: {
            Price = input.ReadFloat();
            break;
          }
          case 32: {
            ItemId = input.ReadInt32();
            break;
          }
          case 45: {
            DiamondPrice = input.ReadFloat();
            break;
          }
          case 53: {
            Percent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipItemPack : pb::IMessage<EquipItemPack> {
    private static readonly pb::MessageParser<EquipItemPack> _parser = new pb::MessageParser<EquipItemPack>(() => new EquipItemPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipItemPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItemPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItemPack(EquipItemPack other) : this() {
      uid_ = other.uid_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItemPack Clone() {
      return new EquipItemPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipItemPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipItemPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipItemPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePlayerInfoPack : pb::IMessage<UpdatePlayerInfoPack> {
    private static readonly pb::MessageParser<UpdatePlayerInfoPack> _parser = new pb::MessageParser<UpdatePlayerInfoPack>(() => new UpdatePlayerInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerInfoPack(UpdatePlayerInfoPack other) : this() {
      uid_ = other.uid_;
      playerName_ = other.playerName_;
      level_ = other.level_;
      maxHealth_ = other.maxHealth_;
      maxArmor_ = other.maxArmor_;
      currentHealth_ = other.currentHealth_;
      currentArmor_ = other.currentArmor_;
      maxExp_ = other.maxExp_;
      currentExp_ = other.currentExp_;
      baseDmgRateBonus_ = other.baseDmgRateBonus_;
      critDmgRateBonus_ = other.critDmgRateBonus_;
      headshotDmgBonus_ = other.headshotDmgBonus_;
      pRateBonus_ = other.pRateBonus_;
      abeBonus_ = other.abeBonus_;
      arDmgBonus_ = other.arDmgBonus_;
      dmrDmgBonus_ = other.dmrDmgBonus_;
      smgDmgBonus_ = other.smgDmgBonus_;
      sgDmgBonus_ = other.sgDmgBonus_;
      mgDmgBonus_ = other.mgDmgBonus_;
      srDmgBonus_ = other.srDmgBonus_;
      hgDmgBonus_ = other.hgDmgBonus_;
      diamond_ = other.diamond_;
      coin_ = other.coin_;
      critDmgBonus_ = other.critDmgBonus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerInfoPack Clone() {
      return new UpdatePlayerInfoPack(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "MaxHealth" field.</summary>
    public const int MaxHealthFieldNumber = 4;
    private float maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxHealth {
      get { return maxHealth_; }
      set {
        maxHealth_ = value;
      }
    }

    /// <summary>Field number for the "MaxArmor" field.</summary>
    public const int MaxArmorFieldNumber = 5;
    private float maxArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxArmor {
      get { return maxArmor_; }
      set {
        maxArmor_ = value;
      }
    }

    /// <summary>Field number for the "CurrentHealth" field.</summary>
    public const int CurrentHealthFieldNumber = 6;
    private float currentHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentHealth {
      get { return currentHealth_; }
      set {
        currentHealth_ = value;
      }
    }

    /// <summary>Field number for the "CurrentArmor" field.</summary>
    public const int CurrentArmorFieldNumber = 7;
    private float currentArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentArmor {
      get { return currentArmor_; }
      set {
        currentArmor_ = value;
      }
    }

    /// <summary>Field number for the "MaxExp" field.</summary>
    public const int MaxExpFieldNumber = 8;
    private float maxExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxExp {
      get { return maxExp_; }
      set {
        maxExp_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExp" field.</summary>
    public const int CurrentExpFieldNumber = 9;
    private float currentExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "BaseDmgRateBonus" field.</summary>
    public const int BaseDmgRateBonusFieldNumber = 10;
    private float baseDmgRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDmgRateBonus {
      get { return baseDmgRateBonus_; }
      set {
        baseDmgRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgRateBonus" field.</summary>
    public const int CritDmgRateBonusFieldNumber = 11;
    private float critDmgRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgRateBonus {
      get { return critDmgRateBonus_; }
      set {
        critDmgRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "HeadshotDmgBonus" field.</summary>
    public const int HeadshotDmgBonusFieldNumber = 12;
    private float headshotDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadshotDmgBonus {
      get { return headshotDmgBonus_; }
      set {
        headshotDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "PRateBonus" field.</summary>
    public const int PRateBonusFieldNumber = 13;
    private float pRateBonus_;
    /// <summary>
    ///穿透率加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRateBonus {
      get { return pRateBonus_; }
      set {
        pRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "AbeBonus" field.</summary>
    public const int AbeBonusFieldNumber = 14;
    private float abeBonus_;
    /// <summary>
    ///破甲效率加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbeBonus {
      get { return abeBonus_; }
      set {
        abeBonus_ = value;
      }
    }

    /// <summary>Field number for the "ArDmgBonus" field.</summary>
    public const int ArDmgBonusFieldNumber = 15;
    private float arDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArDmgBonus {
      get { return arDmgBonus_; }
      set {
        arDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "DmrDmgBonus" field.</summary>
    public const int DmrDmgBonusFieldNumber = 16;
    private float dmrDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DmrDmgBonus {
      get { return dmrDmgBonus_; }
      set {
        dmrDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "SmgDmgBonus" field.</summary>
    public const int SmgDmgBonusFieldNumber = 17;
    private float smgDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SmgDmgBonus {
      get { return smgDmgBonus_; }
      set {
        smgDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "SgDmgBonus" field.</summary>
    public const int SgDmgBonusFieldNumber = 18;
    private float sgDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SgDmgBonus {
      get { return sgDmgBonus_; }
      set {
        sgDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "MgDmgBonus" field.</summary>
    public const int MgDmgBonusFieldNumber = 19;
    private float mgDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MgDmgBonus {
      get { return mgDmgBonus_; }
      set {
        mgDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "SrDmgBonus" field.</summary>
    public const int SrDmgBonusFieldNumber = 20;
    private float srDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SrDmgBonus {
      get { return srDmgBonus_; }
      set {
        srDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "HgDmgBonus" field.</summary>
    public const int HgDmgBonusFieldNumber = 21;
    private float hgDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HgDmgBonus {
      get { return hgDmgBonus_; }
      set {
        hgDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 22;
    private float diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 23;
    private float coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgBonus" field.</summary>
    public const int CritDmgBonusFieldNumber = 24;
    private float critDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgBonus {
      get { return critDmgBonus_; }
      set {
        critDmgBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHealth, other.MaxHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxArmor, other.MaxArmor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentHealth, other.CurrentHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentArmor, other.CurrentArmor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxExp, other.MaxExp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentExp, other.CurrentExp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDmgRateBonus, other.BaseDmgRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgRateBonus, other.CritDmgRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadshotDmgBonus, other.HeadshotDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PRateBonus, other.PRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AbeBonus, other.AbeBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArDmgBonus, other.ArDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmrDmgBonus, other.DmrDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SmgDmgBonus, other.SmgDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SgDmgBonus, other.SgDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MgDmgBonus, other.MgDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SrDmgBonus, other.SrDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HgDmgBonus, other.HgDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Diamond, other.Diamond)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Coin, other.Coin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgBonus, other.CritDmgBonus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MaxHealth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHealth);
      if (MaxArmor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxArmor);
      if (CurrentHealth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentHealth);
      if (CurrentArmor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentArmor);
      if (MaxExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxExp);
      if (CurrentExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentExp);
      if (BaseDmgRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDmgRateBonus);
      if (CritDmgRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgRateBonus);
      if (HeadshotDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadshotDmgBonus);
      if (PRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PRateBonus);
      if (AbeBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AbeBonus);
      if (ArDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArDmgBonus);
      if (DmrDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmrDmgBonus);
      if (SmgDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SmgDmgBonus);
      if (SgDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SgDmgBonus);
      if (MgDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MgDmgBonus);
      if (SrDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SrDmgBonus);
      if (HgDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HgDmgBonus);
      if (Diamond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Diamond);
      if (Coin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Coin);
      if (CritDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgBonus);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (MaxHealth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxHealth);
      }
      if (MaxArmor != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxArmor);
      }
      if (CurrentHealth != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CurrentHealth);
      }
      if (CurrentArmor != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CurrentArmor);
      }
      if (MaxExp != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxExp);
      }
      if (CurrentExp != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CurrentExp);
      }
      if (BaseDmgRateBonus != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(BaseDmgRateBonus);
      }
      if (CritDmgRateBonus != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(CritDmgRateBonus);
      }
      if (HeadshotDmgBonus != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HeadshotDmgBonus);
      }
      if (PRateBonus != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PRateBonus);
      }
      if (AbeBonus != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(AbeBonus);
      }
      if (ArDmgBonus != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ArDmgBonus);
      }
      if (DmrDmgBonus != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DmrDmgBonus);
      }
      if (SmgDmgBonus != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SmgDmgBonus);
      }
      if (SgDmgBonus != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(SgDmgBonus);
      }
      if (MgDmgBonus != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(MgDmgBonus);
      }
      if (SrDmgBonus != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(SrDmgBonus);
      }
      if (HgDmgBonus != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(HgDmgBonus);
      }
      if (Diamond != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Diamond);
      }
      if (Coin != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Coin);
      }
      if (CritDmgBonus != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(CritDmgBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MaxHealth != 0F) {
        size += 1 + 4;
      }
      if (MaxArmor != 0F) {
        size += 1 + 4;
      }
      if (CurrentHealth != 0F) {
        size += 1 + 4;
      }
      if (CurrentArmor != 0F) {
        size += 1 + 4;
      }
      if (MaxExp != 0F) {
        size += 1 + 4;
      }
      if (CurrentExp != 0F) {
        size += 1 + 4;
      }
      if (BaseDmgRateBonus != 0F) {
        size += 1 + 4;
      }
      if (CritDmgRateBonus != 0F) {
        size += 1 + 4;
      }
      if (HeadshotDmgBonus != 0F) {
        size += 1 + 4;
      }
      if (PRateBonus != 0F) {
        size += 1 + 4;
      }
      if (AbeBonus != 0F) {
        size += 1 + 4;
      }
      if (ArDmgBonus != 0F) {
        size += 1 + 4;
      }
      if (DmrDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (SmgDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (SgDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (MgDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (SrDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (HgDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (Diamond != 0F) {
        size += 2 + 4;
      }
      if (Coin != 0F) {
        size += 2 + 4;
      }
      if (CritDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MaxHealth != 0F) {
        MaxHealth = other.MaxHealth;
      }
      if (other.MaxArmor != 0F) {
        MaxArmor = other.MaxArmor;
      }
      if (other.CurrentHealth != 0F) {
        CurrentHealth = other.CurrentHealth;
      }
      if (other.CurrentArmor != 0F) {
        CurrentArmor = other.CurrentArmor;
      }
      if (other.MaxExp != 0F) {
        MaxExp = other.MaxExp;
      }
      if (other.CurrentExp != 0F) {
        CurrentExp = other.CurrentExp;
      }
      if (other.BaseDmgRateBonus != 0F) {
        BaseDmgRateBonus = other.BaseDmgRateBonus;
      }
      if (other.CritDmgRateBonus != 0F) {
        CritDmgRateBonus = other.CritDmgRateBonus;
      }
      if (other.HeadshotDmgBonus != 0F) {
        HeadshotDmgBonus = other.HeadshotDmgBonus;
      }
      if (other.PRateBonus != 0F) {
        PRateBonus = other.PRateBonus;
      }
      if (other.AbeBonus != 0F) {
        AbeBonus = other.AbeBonus;
      }
      if (other.ArDmgBonus != 0F) {
        ArDmgBonus = other.ArDmgBonus;
      }
      if (other.DmrDmgBonus != 0F) {
        DmrDmgBonus = other.DmrDmgBonus;
      }
      if (other.SmgDmgBonus != 0F) {
        SmgDmgBonus = other.SmgDmgBonus;
      }
      if (other.SgDmgBonus != 0F) {
        SgDmgBonus = other.SgDmgBonus;
      }
      if (other.MgDmgBonus != 0F) {
        MgDmgBonus = other.MgDmgBonus;
      }
      if (other.SrDmgBonus != 0F) {
        SrDmgBonus = other.SrDmgBonus;
      }
      if (other.HgDmgBonus != 0F) {
        HgDmgBonus = other.HgDmgBonus;
      }
      if (other.Diamond != 0F) {
        Diamond = other.Diamond;
      }
      if (other.Coin != 0F) {
        Coin = other.Coin;
      }
      if (other.CritDmgBonus != 0F) {
        CritDmgBonus = other.CritDmgBonus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 37: {
            MaxHealth = input.ReadFloat();
            break;
          }
          case 45: {
            MaxArmor = input.ReadFloat();
            break;
          }
          case 53: {
            CurrentHealth = input.ReadFloat();
            break;
          }
          case 61: {
            CurrentArmor = input.ReadFloat();
            break;
          }
          case 69: {
            MaxExp = input.ReadFloat();
            break;
          }
          case 77: {
            CurrentExp = input.ReadFloat();
            break;
          }
          case 85: {
            BaseDmgRateBonus = input.ReadFloat();
            break;
          }
          case 93: {
            CritDmgRateBonus = input.ReadFloat();
            break;
          }
          case 101: {
            HeadshotDmgBonus = input.ReadFloat();
            break;
          }
          case 109: {
            PRateBonus = input.ReadFloat();
            break;
          }
          case 117: {
            AbeBonus = input.ReadFloat();
            break;
          }
          case 125: {
            ArDmgBonus = input.ReadFloat();
            break;
          }
          case 133: {
            DmrDmgBonus = input.ReadFloat();
            break;
          }
          case 141: {
            SmgDmgBonus = input.ReadFloat();
            break;
          }
          case 149: {
            SgDmgBonus = input.ReadFloat();
            break;
          }
          case 157: {
            MgDmgBonus = input.ReadFloat();
            break;
          }
          case 165: {
            SrDmgBonus = input.ReadFloat();
            break;
          }
          case 173: {
            HgDmgBonus = input.ReadFloat();
            break;
          }
          case 181: {
            Diamond = input.ReadFloat();
            break;
          }
          case 189: {
            Coin = input.ReadFloat();
            break;
          }
          case 197: {
            CritDmgBonus = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentPack : pb::IMessage<EquipmentPack> {
    private static readonly pb::MessageParser<EquipmentPack> _parser = new pb::MessageParser<EquipmentPack>(() => new EquipmentPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack(EquipmentPack other) : this() {
      itemId_ = other.itemId_;
      equipmentName_ = other.equipmentName_;
      equipmentSuit_ = other.equipmentSuit_;
      subProp1_ = other.subProp1_;
      subProp1Value_ = other.subProp1Value_;
      subProp2_ = other.subProp2_;
      subProp2Value_ = other.subProp2Value_;
      subProp3_ = other.subProp3_;
      subProp3Value_ = other.subProp3Value_;
      talent1_ = other.talent1_;
      talent2_ = other.talent2_;
      use_ = other.use_;
      block_ = other.block_;
      price_ = other.price_;
      itemType_ = other.itemType_;
      subProp1Type_ = other.subProp1Type_;
      subProp2Type_ = other.subProp2Type_;
      subProp3Type_ = other.subProp3Type_;
      healthBonus_ = other.healthBonus_;
      baseDmgBonus_ = other.baseDmgBonus_;
      critDmgRateBonus_ = other.critDmgRateBonus_;
      critDmgBonus_ = other.critDmgBonus_;
      headshotDmgBonus_ = other.headshotDmgBonus_;
      pRateBonus_ = other.pRateBonus_;
      abeBonus_ = other.abeBonus_;
      armorBonus_ = other.armorBonus_;
      subProp1MaxValue_ = other.subProp1MaxValue_;
      subProp2MaxValue_ = other.subProp2MaxValue_;
      subProp3MaxValue_ = other.subProp3MaxValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentPack Clone() {
      return new EquipmentPack(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentName" field.</summary>
    public const int EquipmentNameFieldNumber = 2;
    private string equipmentName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipmentName {
      get { return equipmentName_; }
      set {
        equipmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EquipmentSuit" field.</summary>
    public const int EquipmentSuitFieldNumber = 3;
    private string equipmentSuit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipmentSuit {
      get { return equipmentSuit_; }
      set {
        equipmentSuit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp1" field.</summary>
    public const int SubProp1FieldNumber = 4;
    private string subProp1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp1 {
      get { return subProp1_; }
      set {
        subProp1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp1Value" field.</summary>
    public const int SubProp1ValueFieldNumber = 5;
    private float subProp1Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1Value {
      get { return subProp1Value_; }
      set {
        subProp1Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2" field.</summary>
    public const int SubProp2FieldNumber = 6;
    private string subProp2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp2 {
      get { return subProp2_; }
      set {
        subProp2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp2Value" field.</summary>
    public const int SubProp2ValueFieldNumber = 7;
    private float subProp2Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2Value {
      get { return subProp2Value_; }
      set {
        subProp2Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3" field.</summary>
    public const int SubProp3FieldNumber = 8;
    private string subProp3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp3 {
      get { return subProp3_; }
      set {
        subProp3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp3Value" field.</summary>
    public const int SubProp3ValueFieldNumber = 9;
    private float subProp3Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3Value {
      get { return subProp3Value_; }
      set {
        subProp3Value_ = value;
      }
    }

    /// <summary>Field number for the "Talent1" field.</summary>
    public const int Talent1FieldNumber = 10;
    private global::SocketProtocol.EEquipmentTalent talent1_ = global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentTalent Talent1 {
      get { return talent1_; }
      set {
        talent1_ = value;
      }
    }

    /// <summary>Field number for the "Talent2" field.</summary>
    public const int Talent2FieldNumber = 11;
    private global::SocketProtocol.EEquipmentTalent talent2_ = global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketProtocol.EEquipmentTalent Talent2 {
      get { return talent2_; }
      set {
        talent2_ = value;
      }
    }

    /// <summary>Field number for the "Use" field.</summary>
    public const int UseFieldNumber = 12;
    private bool use_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    /// <summary>Field number for the "Block" field.</summary>
    public const int BlockFieldNumber = 13;
    private bool block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 14;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "ItemType" field.</summary>
    public const int ItemTypeFieldNumber = 15;
    private string itemType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemType {
      get { return itemType_; }
      set {
        itemType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp1Type" field.</summary>
    public const int SubProp1TypeFieldNumber = 16;
    private int subProp1Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp1Type {
      get { return subProp1Type_; }
      set {
        subProp1Type_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2Type" field.</summary>
    public const int SubProp2TypeFieldNumber = 17;
    private int subProp2Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp2Type {
      get { return subProp2Type_; }
      set {
        subProp2Type_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3Type" field.</summary>
    public const int SubProp3TypeFieldNumber = 18;
    private int subProp3Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp3Type {
      get { return subProp3Type_; }
      set {
        subProp3Type_ = value;
      }
    }

    /// <summary>Field number for the "HealthBonus" field.</summary>
    public const int HealthBonusFieldNumber = 19;
    private float healthBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthBonus {
      get { return healthBonus_; }
      set {
        healthBonus_ = value;
      }
    }

    /// <summary>Field number for the "BaseDmgBonus" field.</summary>
    public const int BaseDmgBonusFieldNumber = 20;
    private float baseDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDmgBonus {
      get { return baseDmgBonus_; }
      set {
        baseDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgRateBonus" field.</summary>
    public const int CritDmgRateBonusFieldNumber = 21;
    private float critDmgRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgRateBonus {
      get { return critDmgRateBonus_; }
      set {
        critDmgRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgBonus" field.</summary>
    public const int CritDmgBonusFieldNumber = 22;
    private float critDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgBonus {
      get { return critDmgBonus_; }
      set {
        critDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "HeadshotDmgBonus" field.</summary>
    public const int HeadshotDmgBonusFieldNumber = 23;
    private float headshotDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadshotDmgBonus {
      get { return headshotDmgBonus_; }
      set {
        headshotDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "PRateBonus" field.</summary>
    public const int PRateBonusFieldNumber = 24;
    private float pRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRateBonus {
      get { return pRateBonus_; }
      set {
        pRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "AbeBonus" field.</summary>
    public const int AbeBonusFieldNumber = 25;
    private float abeBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbeBonus {
      get { return abeBonus_; }
      set {
        abeBonus_ = value;
      }
    }

    /// <summary>Field number for the "ArmorBonus" field.</summary>
    public const int ArmorBonusFieldNumber = 26;
    private float armorBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArmorBonus {
      get { return armorBonus_; }
      set {
        armorBonus_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1MaxValue" field.</summary>
    public const int SubProp1MaxValueFieldNumber = 27;
    private float subProp1MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1MaxValue {
      get { return subProp1MaxValue_; }
      set {
        subProp1MaxValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2MaxValue" field.</summary>
    public const int SubProp2MaxValueFieldNumber = 28;
    private float subProp2MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2MaxValue {
      get { return subProp2MaxValue_; }
      set {
        subProp2MaxValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3MaxValue" field.</summary>
    public const int SubProp3MaxValueFieldNumber = 29;
    private float subProp3MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3MaxValue {
      get { return subProp3MaxValue_; }
      set {
        subProp3MaxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (EquipmentName != other.EquipmentName) return false;
      if (EquipmentSuit != other.EquipmentSuit) return false;
      if (SubProp1 != other.SubProp1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1Value, other.SubProp1Value)) return false;
      if (SubProp2 != other.SubProp2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2Value, other.SubProp2Value)) return false;
      if (SubProp3 != other.SubProp3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3Value, other.SubProp3Value)) return false;
      if (Talent1 != other.Talent1) return false;
      if (Talent2 != other.Talent2) return false;
      if (Use != other.Use) return false;
      if (Block != other.Block) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (ItemType != other.ItemType) return false;
      if (SubProp1Type != other.SubProp1Type) return false;
      if (SubProp2Type != other.SubProp2Type) return false;
      if (SubProp3Type != other.SubProp3Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthBonus, other.HealthBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDmgBonus, other.BaseDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgRateBonus, other.CritDmgRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgBonus, other.CritDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadshotDmgBonus, other.HeadshotDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PRateBonus, other.PRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AbeBonus, other.AbeBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorBonus, other.ArmorBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1MaxValue, other.SubProp1MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2MaxValue, other.SubProp2MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3MaxValue, other.SubProp3MaxValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (EquipmentName.Length != 0) hash ^= EquipmentName.GetHashCode();
      if (EquipmentSuit.Length != 0) hash ^= EquipmentSuit.GetHashCode();
      if (SubProp1.Length != 0) hash ^= SubProp1.GetHashCode();
      if (SubProp1Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1Value);
      if (SubProp2.Length != 0) hash ^= SubProp2.GetHashCode();
      if (SubProp2Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2Value);
      if (SubProp3.Length != 0) hash ^= SubProp3.GetHashCode();
      if (SubProp3Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3Value);
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) hash ^= Talent1.GetHashCode();
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) hash ^= Talent2.GetHashCode();
      if (Use != false) hash ^= Use.GetHashCode();
      if (Block != false) hash ^= Block.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (ItemType.Length != 0) hash ^= ItemType.GetHashCode();
      if (SubProp1Type != 0) hash ^= SubProp1Type.GetHashCode();
      if (SubProp2Type != 0) hash ^= SubProp2Type.GetHashCode();
      if (SubProp3Type != 0) hash ^= SubProp3Type.GetHashCode();
      if (HealthBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthBonus);
      if (BaseDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDmgBonus);
      if (CritDmgRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgRateBonus);
      if (CritDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgBonus);
      if (HeadshotDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadshotDmgBonus);
      if (PRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PRateBonus);
      if (AbeBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AbeBonus);
      if (ArmorBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorBonus);
      if (SubProp1MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1MaxValue);
      if (SubProp2MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2MaxValue);
      if (SubProp3MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3MaxValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (EquipmentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EquipmentName);
      }
      if (EquipmentSuit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EquipmentSuit);
      }
      if (SubProp1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SubProp1);
      }
      if (SubProp1Value != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SubProp1Value);
      }
      if (SubProp2.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubProp2);
      }
      if (SubProp2Value != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SubProp2Value);
      }
      if (SubProp3.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SubProp3);
      }
      if (SubProp3Value != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SubProp3Value);
      }
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Talent1);
      }
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Talent2);
      }
      if (Use != false) {
        output.WriteRawTag(96);
        output.WriteBool(Use);
      }
      if (Block != false) {
        output.WriteRawTag(104);
        output.WriteBool(Block);
      }
      if (Price != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Price);
      }
      if (ItemType.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ItemType);
      }
      if (SubProp1Type != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SubProp1Type);
      }
      if (SubProp2Type != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SubProp2Type);
      }
      if (SubProp3Type != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SubProp3Type);
      }
      if (HealthBonus != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(HealthBonus);
      }
      if (BaseDmgBonus != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(BaseDmgBonus);
      }
      if (CritDmgRateBonus != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CritDmgRateBonus);
      }
      if (CritDmgBonus != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(CritDmgBonus);
      }
      if (HeadshotDmgBonus != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(HeadshotDmgBonus);
      }
      if (PRateBonus != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(PRateBonus);
      }
      if (AbeBonus != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(AbeBonus);
      }
      if (ArmorBonus != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(ArmorBonus);
      }
      if (SubProp1MaxValue != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(SubProp1MaxValue);
      }
      if (SubProp2MaxValue != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(SubProp2MaxValue);
      }
      if (SubProp3MaxValue != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(SubProp3MaxValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (EquipmentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipmentName);
      }
      if (EquipmentSuit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipmentSuit);
      }
      if (SubProp1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp1);
      }
      if (SubProp1Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp2);
      }
      if (SubProp2Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp3);
      }
      if (SubProp3Value != 0F) {
        size += 1 + 4;
      }
      if (Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Talent1);
      }
      if (Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Talent2);
      }
      if (Use != false) {
        size += 1 + 1;
      }
      if (Block != false) {
        size += 1 + 1;
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (ItemType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemType);
      }
      if (SubProp1Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp1Type);
      }
      if (SubProp2Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp2Type);
      }
      if (SubProp3Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp3Type);
      }
      if (HealthBonus != 0F) {
        size += 2 + 4;
      }
      if (BaseDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (CritDmgRateBonus != 0F) {
        size += 2 + 4;
      }
      if (CritDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (HeadshotDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (PRateBonus != 0F) {
        size += 2 + 4;
      }
      if (AbeBonus != 0F) {
        size += 2 + 4;
      }
      if (ArmorBonus != 0F) {
        size += 2 + 4;
      }
      if (SubProp1MaxValue != 0F) {
        size += 2 + 4;
      }
      if (SubProp2MaxValue != 0F) {
        size += 2 + 4;
      }
      if (SubProp3MaxValue != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentPack other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.EquipmentName.Length != 0) {
        EquipmentName = other.EquipmentName;
      }
      if (other.EquipmentSuit.Length != 0) {
        EquipmentSuit = other.EquipmentSuit;
      }
      if (other.SubProp1.Length != 0) {
        SubProp1 = other.SubProp1;
      }
      if (other.SubProp1Value != 0F) {
        SubProp1Value = other.SubProp1Value;
      }
      if (other.SubProp2.Length != 0) {
        SubProp2 = other.SubProp2;
      }
      if (other.SubProp2Value != 0F) {
        SubProp2Value = other.SubProp2Value;
      }
      if (other.SubProp3.Length != 0) {
        SubProp3 = other.SubProp3;
      }
      if (other.SubProp3Value != 0F) {
        SubProp3Value = other.SubProp3Value;
      }
      if (other.Talent1 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        Talent1 = other.Talent1;
      }
      if (other.Talent2 != global::SocketProtocol.EEquipmentTalent.Test1EquipmentTalent1) {
        Talent2 = other.Talent2;
      }
      if (other.Use != false) {
        Use = other.Use;
      }
      if (other.Block != false) {
        Block = other.Block;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.ItemType.Length != 0) {
        ItemType = other.ItemType;
      }
      if (other.SubProp1Type != 0) {
        SubProp1Type = other.SubProp1Type;
      }
      if (other.SubProp2Type != 0) {
        SubProp2Type = other.SubProp2Type;
      }
      if (other.SubProp3Type != 0) {
        SubProp3Type = other.SubProp3Type;
      }
      if (other.HealthBonus != 0F) {
        HealthBonus = other.HealthBonus;
      }
      if (other.BaseDmgBonus != 0F) {
        BaseDmgBonus = other.BaseDmgBonus;
      }
      if (other.CritDmgRateBonus != 0F) {
        CritDmgRateBonus = other.CritDmgRateBonus;
      }
      if (other.CritDmgBonus != 0F) {
        CritDmgBonus = other.CritDmgBonus;
      }
      if (other.HeadshotDmgBonus != 0F) {
        HeadshotDmgBonus = other.HeadshotDmgBonus;
      }
      if (other.PRateBonus != 0F) {
        PRateBonus = other.PRateBonus;
      }
      if (other.AbeBonus != 0F) {
        AbeBonus = other.AbeBonus;
      }
      if (other.ArmorBonus != 0F) {
        ArmorBonus = other.ArmorBonus;
      }
      if (other.SubProp1MaxValue != 0F) {
        SubProp1MaxValue = other.SubProp1MaxValue;
      }
      if (other.SubProp2MaxValue != 0F) {
        SubProp2MaxValue = other.SubProp2MaxValue;
      }
      if (other.SubProp3MaxValue != 0F) {
        SubProp3MaxValue = other.SubProp3MaxValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18: {
            EquipmentName = input.ReadString();
            break;
          }
          case 26: {
            EquipmentSuit = input.ReadString();
            break;
          }
          case 34: {
            SubProp1 = input.ReadString();
            break;
          }
          case 45: {
            SubProp1Value = input.ReadFloat();
            break;
          }
          case 50: {
            SubProp2 = input.ReadString();
            break;
          }
          case 61: {
            SubProp2Value = input.ReadFloat();
            break;
          }
          case 66: {
            SubProp3 = input.ReadString();
            break;
          }
          case 77: {
            SubProp3Value = input.ReadFloat();
            break;
          }
          case 80: {
            Talent1 = (global::SocketProtocol.EEquipmentTalent) input.ReadEnum();
            break;
          }
          case 88: {
            Talent2 = (global::SocketProtocol.EEquipmentTalent) input.ReadEnum();
            break;
          }
          case 96: {
            Use = input.ReadBool();
            break;
          }
          case 104: {
            Block = input.ReadBool();
            break;
          }
          case 117: {
            Price = input.ReadFloat();
            break;
          }
          case 122: {
            ItemType = input.ReadString();
            break;
          }
          case 128: {
            SubProp1Type = input.ReadInt32();
            break;
          }
          case 136: {
            SubProp2Type = input.ReadInt32();
            break;
          }
          case 144: {
            SubProp3Type = input.ReadInt32();
            break;
          }
          case 157: {
            HealthBonus = input.ReadFloat();
            break;
          }
          case 165: {
            BaseDmgBonus = input.ReadFloat();
            break;
          }
          case 173: {
            CritDmgRateBonus = input.ReadFloat();
            break;
          }
          case 181: {
            CritDmgBonus = input.ReadFloat();
            break;
          }
          case 189: {
            HeadshotDmgBonus = input.ReadFloat();
            break;
          }
          case 197: {
            PRateBonus = input.ReadFloat();
            break;
          }
          case 205: {
            AbeBonus = input.ReadFloat();
            break;
          }
          case 213: {
            ArmorBonus = input.ReadFloat();
            break;
          }
          case 221: {
            SubProp1MaxValue = input.ReadFloat();
            break;
          }
          case 229: {
            SubProp2MaxValue = input.ReadFloat();
            break;
          }
          case 237: {
            SubProp3MaxValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GunPack : pb::IMessage<GunPack> {
    private static readonly pb::MessageParser<GunPack> _parser = new pb::MessageParser<GunPack>(() => new GunPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GunPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack(GunPack other) : this() {
      itemId_ = other.itemId_;
      gunName_ = other.gunName_;
      itemType_ = other.itemType_;
      baseDmg_ = other.baseDmg_;
      firingRate_ = other.firingRate_;
      currentFiringRatePerSecond_ = other.currentFiringRatePerSecond_;
      magazine_ = other.magazine_;
      coreProp_ = other.coreProp_;
      corePropValue_ = other.corePropValue_;
      subProp1_ = other.subProp1_;
      subProp1Value_ = other.subProp1Value_;
      subProp2_ = other.subProp2_;
      subProp2Value_ = other.subProp2Value_;
      subProp3_ = other.subProp3_;
      subProp3Value_ = other.subProp3Value_;
      use_ = other.use_;
      block_ = other.block_;
      price_ = other.price_;
      subProp1Type_ = other.subProp1Type_;
      subProp2Type_ = other.subProp2Type_;
      subProp3Type_ = other.subProp3Type_;
      corePropType_ = other.corePropType_;
      healthBonus_ = other.healthBonus_;
      baseDmgBonus_ = other.baseDmgBonus_;
      critDmgRateBonus_ = other.critDmgRateBonus_;
      critDmgBonus_ = other.critDmgBonus_;
      headshotDmgBonus_ = other.headshotDmgBonus_;
      pRateBonus_ = other.pRateBonus_;
      abeBonus_ = other.abeBonus_;
      armorBonus_ = other.armorBonus_;
      subProp1MaxValue_ = other.subProp1MaxValue_;
      subProp2MaxValue_ = other.subProp2MaxValue_;
      subProp3MaxValue_ = other.subProp3MaxValue_;
      reloadingTime_ = other.reloadingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunPack Clone() {
      return new GunPack(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "GunName" field.</summary>
    public const int GunNameFieldNumber = 2;
    private string gunName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GunName {
      get { return gunName_; }
      set {
        gunName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemType" field.</summary>
    public const int ItemTypeFieldNumber = 3;
    private string itemType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemType {
      get { return itemType_; }
      set {
        itemType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BaseDmg" field.</summary>
    public const int BaseDmgFieldNumber = 4;
    private float baseDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDmg {
      get { return baseDmg_; }
      set {
        baseDmg_ = value;
      }
    }

    /// <summary>Field number for the "FiringRate" field.</summary>
    public const int FiringRateFieldNumber = 5;
    private float firingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FiringRate {
      get { return firingRate_; }
      set {
        firingRate_ = value;
      }
    }

    /// <summary>Field number for the "CurrentFiringRatePerSecond" field.</summary>
    public const int CurrentFiringRatePerSecondFieldNumber = 6;
    private float currentFiringRatePerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentFiringRatePerSecond {
      get { return currentFiringRatePerSecond_; }
      set {
        currentFiringRatePerSecond_ = value;
      }
    }

    /// <summary>Field number for the "Magazine" field.</summary>
    public const int MagazineFieldNumber = 7;
    private int magazine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magazine {
      get { return magazine_; }
      set {
        magazine_ = value;
      }
    }

    /// <summary>Field number for the "CoreProp" field.</summary>
    public const int CorePropFieldNumber = 8;
    private string coreProp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoreProp {
      get { return coreProp_; }
      set {
        coreProp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CorePropValue" field.</summary>
    public const int CorePropValueFieldNumber = 9;
    private float corePropValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CorePropValue {
      get { return corePropValue_; }
      set {
        corePropValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1" field.</summary>
    public const int SubProp1FieldNumber = 10;
    private string subProp1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp1 {
      get { return subProp1_; }
      set {
        subProp1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp1Value" field.</summary>
    public const int SubProp1ValueFieldNumber = 11;
    private float subProp1Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1Value {
      get { return subProp1Value_; }
      set {
        subProp1Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2" field.</summary>
    public const int SubProp2FieldNumber = 12;
    private string subProp2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp2 {
      get { return subProp2_; }
      set {
        subProp2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp2Value" field.</summary>
    public const int SubProp2ValueFieldNumber = 13;
    private float subProp2Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2Value {
      get { return subProp2Value_; }
      set {
        subProp2Value_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3" field.</summary>
    public const int SubProp3FieldNumber = 14;
    private string subProp3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubProp3 {
      get { return subProp3_; }
      set {
        subProp3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubProp3Value" field.</summary>
    public const int SubProp3ValueFieldNumber = 15;
    private float subProp3Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3Value {
      get { return subProp3Value_; }
      set {
        subProp3Value_ = value;
      }
    }

    /// <summary>Field number for the "Use" field.</summary>
    public const int UseFieldNumber = 16;
    private bool use_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    /// <summary>Field number for the "Block" field.</summary>
    public const int BlockFieldNumber = 17;
    private bool block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 18;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1Type" field.</summary>
    public const int SubProp1TypeFieldNumber = 19;
    private int subProp1Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp1Type {
      get { return subProp1Type_; }
      set {
        subProp1Type_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2Type" field.</summary>
    public const int SubProp2TypeFieldNumber = 20;
    private int subProp2Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp2Type {
      get { return subProp2Type_; }
      set {
        subProp2Type_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3Type" field.</summary>
    public const int SubProp3TypeFieldNumber = 21;
    private int subProp3Type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubProp3Type {
      get { return subProp3Type_; }
      set {
        subProp3Type_ = value;
      }
    }

    /// <summary>Field number for the "CorePropType" field.</summary>
    public const int CorePropTypeFieldNumber = 22;
    private int corePropType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CorePropType {
      get { return corePropType_; }
      set {
        corePropType_ = value;
      }
    }

    /// <summary>Field number for the "HealthBonus" field.</summary>
    public const int HealthBonusFieldNumber = 23;
    private float healthBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthBonus {
      get { return healthBonus_; }
      set {
        healthBonus_ = value;
      }
    }

    /// <summary>Field number for the "BaseDmgBonus" field.</summary>
    public const int BaseDmgBonusFieldNumber = 24;
    private float baseDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDmgBonus {
      get { return baseDmgBonus_; }
      set {
        baseDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgRateBonus" field.</summary>
    public const int CritDmgRateBonusFieldNumber = 25;
    private float critDmgRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgRateBonus {
      get { return critDmgRateBonus_; }
      set {
        critDmgRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "CritDmgBonus" field.</summary>
    public const int CritDmgBonusFieldNumber = 26;
    private float critDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritDmgBonus {
      get { return critDmgBonus_; }
      set {
        critDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "HeadshotDmgBonus" field.</summary>
    public const int HeadshotDmgBonusFieldNumber = 27;
    private float headshotDmgBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadshotDmgBonus {
      get { return headshotDmgBonus_; }
      set {
        headshotDmgBonus_ = value;
      }
    }

    /// <summary>Field number for the "PRateBonus" field.</summary>
    public const int PRateBonusFieldNumber = 28;
    private float pRateBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRateBonus {
      get { return pRateBonus_; }
      set {
        pRateBonus_ = value;
      }
    }

    /// <summary>Field number for the "AbeBonus" field.</summary>
    public const int AbeBonusFieldNumber = 29;
    private float abeBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbeBonus {
      get { return abeBonus_; }
      set {
        abeBonus_ = value;
      }
    }

    /// <summary>Field number for the "ArmorBonus" field.</summary>
    public const int ArmorBonusFieldNumber = 30;
    private float armorBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArmorBonus {
      get { return armorBonus_; }
      set {
        armorBonus_ = value;
      }
    }

    /// <summary>Field number for the "SubProp1MaxValue" field.</summary>
    public const int SubProp1MaxValueFieldNumber = 31;
    private float subProp1MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp1MaxValue {
      get { return subProp1MaxValue_; }
      set {
        subProp1MaxValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp2MaxValue" field.</summary>
    public const int SubProp2MaxValueFieldNumber = 32;
    private float subProp2MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp2MaxValue {
      get { return subProp2MaxValue_; }
      set {
        subProp2MaxValue_ = value;
      }
    }

    /// <summary>Field number for the "SubProp3MaxValue" field.</summary>
    public const int SubProp3MaxValueFieldNumber = 33;
    private float subProp3MaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SubProp3MaxValue {
      get { return subProp3MaxValue_; }
      set {
        subProp3MaxValue_ = value;
      }
    }

    /// <summary>Field number for the "ReloadingTime" field.</summary>
    public const int ReloadingTimeFieldNumber = 34;
    private float reloadingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReloadingTime {
      get { return reloadingTime_; }
      set {
        reloadingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GunPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GunPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (GunName != other.GunName) return false;
      if (ItemType != other.ItemType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDmg, other.BaseDmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FiringRate, other.FiringRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentFiringRatePerSecond, other.CurrentFiringRatePerSecond)) return false;
      if (Magazine != other.Magazine) return false;
      if (CoreProp != other.CoreProp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CorePropValue, other.CorePropValue)) return false;
      if (SubProp1 != other.SubProp1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1Value, other.SubProp1Value)) return false;
      if (SubProp2 != other.SubProp2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2Value, other.SubProp2Value)) return false;
      if (SubProp3 != other.SubProp3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3Value, other.SubProp3Value)) return false;
      if (Use != other.Use) return false;
      if (Block != other.Block) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (SubProp1Type != other.SubProp1Type) return false;
      if (SubProp2Type != other.SubProp2Type) return false;
      if (SubProp3Type != other.SubProp3Type) return false;
      if (CorePropType != other.CorePropType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthBonus, other.HealthBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDmgBonus, other.BaseDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgRateBonus, other.CritDmgRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritDmgBonus, other.CritDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadshotDmgBonus, other.HeadshotDmgBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PRateBonus, other.PRateBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AbeBonus, other.AbeBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorBonus, other.ArmorBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp1MaxValue, other.SubProp1MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp2MaxValue, other.SubProp2MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SubProp3MaxValue, other.SubProp3MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReloadingTime, other.ReloadingTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (GunName.Length != 0) hash ^= GunName.GetHashCode();
      if (ItemType.Length != 0) hash ^= ItemType.GetHashCode();
      if (BaseDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDmg);
      if (FiringRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FiringRate);
      if (CurrentFiringRatePerSecond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentFiringRatePerSecond);
      if (Magazine != 0) hash ^= Magazine.GetHashCode();
      if (CoreProp.Length != 0) hash ^= CoreProp.GetHashCode();
      if (CorePropValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CorePropValue);
      if (SubProp1.Length != 0) hash ^= SubProp1.GetHashCode();
      if (SubProp1Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1Value);
      if (SubProp2.Length != 0) hash ^= SubProp2.GetHashCode();
      if (SubProp2Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2Value);
      if (SubProp3.Length != 0) hash ^= SubProp3.GetHashCode();
      if (SubProp3Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3Value);
      if (Use != false) hash ^= Use.GetHashCode();
      if (Block != false) hash ^= Block.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (SubProp1Type != 0) hash ^= SubProp1Type.GetHashCode();
      if (SubProp2Type != 0) hash ^= SubProp2Type.GetHashCode();
      if (SubProp3Type != 0) hash ^= SubProp3Type.GetHashCode();
      if (CorePropType != 0) hash ^= CorePropType.GetHashCode();
      if (HealthBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthBonus);
      if (BaseDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDmgBonus);
      if (CritDmgRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgRateBonus);
      if (CritDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritDmgBonus);
      if (HeadshotDmgBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadshotDmgBonus);
      if (PRateBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PRateBonus);
      if (AbeBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AbeBonus);
      if (ArmorBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorBonus);
      if (SubProp1MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp1MaxValue);
      if (SubProp2MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp2MaxValue);
      if (SubProp3MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SubProp3MaxValue);
      if (ReloadingTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReloadingTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (GunName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GunName);
      }
      if (ItemType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemType);
      }
      if (BaseDmg != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BaseDmg);
      }
      if (FiringRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FiringRate);
      }
      if (CurrentFiringRatePerSecond != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CurrentFiringRatePerSecond);
      }
      if (Magazine != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Magazine);
      }
      if (CoreProp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CoreProp);
      }
      if (CorePropValue != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CorePropValue);
      }
      if (SubProp1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SubProp1);
      }
      if (SubProp1Value != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SubProp1Value);
      }
      if (SubProp2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SubProp2);
      }
      if (SubProp2Value != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SubProp2Value);
      }
      if (SubProp3.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SubProp3);
      }
      if (SubProp3Value != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(SubProp3Value);
      }
      if (Use != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Use);
      }
      if (Block != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Block);
      }
      if (Price != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Price);
      }
      if (SubProp1Type != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SubProp1Type);
      }
      if (SubProp2Type != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SubProp2Type);
      }
      if (SubProp3Type != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SubProp3Type);
      }
      if (CorePropType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CorePropType);
      }
      if (HealthBonus != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(HealthBonus);
      }
      if (BaseDmgBonus != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(BaseDmgBonus);
      }
      if (CritDmgRateBonus != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(CritDmgRateBonus);
      }
      if (CritDmgBonus != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(CritDmgBonus);
      }
      if (HeadshotDmgBonus != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(HeadshotDmgBonus);
      }
      if (PRateBonus != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(PRateBonus);
      }
      if (AbeBonus != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(AbeBonus);
      }
      if (ArmorBonus != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(ArmorBonus);
      }
      if (SubProp1MaxValue != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(SubProp1MaxValue);
      }
      if (SubProp2MaxValue != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(SubProp2MaxValue);
      }
      if (SubProp3MaxValue != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(SubProp3MaxValue);
      }
      if (ReloadingTime != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(ReloadingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (GunName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GunName);
      }
      if (ItemType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemType);
      }
      if (BaseDmg != 0F) {
        size += 1 + 4;
      }
      if (FiringRate != 0F) {
        size += 1 + 4;
      }
      if (CurrentFiringRatePerSecond != 0F) {
        size += 1 + 4;
      }
      if (Magazine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magazine);
      }
      if (CoreProp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreProp);
      }
      if (CorePropValue != 0F) {
        size += 1 + 4;
      }
      if (SubProp1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp1);
      }
      if (SubProp1Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp2);
      }
      if (SubProp2Value != 0F) {
        size += 1 + 4;
      }
      if (SubProp3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubProp3);
      }
      if (SubProp3Value != 0F) {
        size += 1 + 4;
      }
      if (Use != false) {
        size += 2 + 1;
      }
      if (Block != false) {
        size += 2 + 1;
      }
      if (Price != 0F) {
        size += 2 + 4;
      }
      if (SubProp1Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp1Type);
      }
      if (SubProp2Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp2Type);
      }
      if (SubProp3Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubProp3Type);
      }
      if (CorePropType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CorePropType);
      }
      if (HealthBonus != 0F) {
        size += 2 + 4;
      }
      if (BaseDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (CritDmgRateBonus != 0F) {
        size += 2 + 4;
      }
      if (CritDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (HeadshotDmgBonus != 0F) {
        size += 2 + 4;
      }
      if (PRateBonus != 0F) {
        size += 2 + 4;
      }
      if (AbeBonus != 0F) {
        size += 2 + 4;
      }
      if (ArmorBonus != 0F) {
        size += 2 + 4;
      }
      if (SubProp1MaxValue != 0F) {
        size += 2 + 4;
      }
      if (SubProp2MaxValue != 0F) {
        size += 2 + 4;
      }
      if (SubProp3MaxValue != 0F) {
        size += 2 + 4;
      }
      if (ReloadingTime != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GunPack other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.GunName.Length != 0) {
        GunName = other.GunName;
      }
      if (other.ItemType.Length != 0) {
        ItemType = other.ItemType;
      }
      if (other.BaseDmg != 0F) {
        BaseDmg = other.BaseDmg;
      }
      if (other.FiringRate != 0F) {
        FiringRate = other.FiringRate;
      }
      if (other.CurrentFiringRatePerSecond != 0F) {
        CurrentFiringRatePerSecond = other.CurrentFiringRatePerSecond;
      }
      if (other.Magazine != 0) {
        Magazine = other.Magazine;
      }
      if (other.CoreProp.Length != 0) {
        CoreProp = other.CoreProp;
      }
      if (other.CorePropValue != 0F) {
        CorePropValue = other.CorePropValue;
      }
      if (other.SubProp1.Length != 0) {
        SubProp1 = other.SubProp1;
      }
      if (other.SubProp1Value != 0F) {
        SubProp1Value = other.SubProp1Value;
      }
      if (other.SubProp2.Length != 0) {
        SubProp2 = other.SubProp2;
      }
      if (other.SubProp2Value != 0F) {
        SubProp2Value = other.SubProp2Value;
      }
      if (other.SubProp3.Length != 0) {
        SubProp3 = other.SubProp3;
      }
      if (other.SubProp3Value != 0F) {
        SubProp3Value = other.SubProp3Value;
      }
      if (other.Use != false) {
        Use = other.Use;
      }
      if (other.Block != false) {
        Block = other.Block;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.SubProp1Type != 0) {
        SubProp1Type = other.SubProp1Type;
      }
      if (other.SubProp2Type != 0) {
        SubProp2Type = other.SubProp2Type;
      }
      if (other.SubProp3Type != 0) {
        SubProp3Type = other.SubProp3Type;
      }
      if (other.CorePropType != 0) {
        CorePropType = other.CorePropType;
      }
      if (other.HealthBonus != 0F) {
        HealthBonus = other.HealthBonus;
      }
      if (other.BaseDmgBonus != 0F) {
        BaseDmgBonus = other.BaseDmgBonus;
      }
      if (other.CritDmgRateBonus != 0F) {
        CritDmgRateBonus = other.CritDmgRateBonus;
      }
      if (other.CritDmgBonus != 0F) {
        CritDmgBonus = other.CritDmgBonus;
      }
      if (other.HeadshotDmgBonus != 0F) {
        HeadshotDmgBonus = other.HeadshotDmgBonus;
      }
      if (other.PRateBonus != 0F) {
        PRateBonus = other.PRateBonus;
      }
      if (other.AbeBonus != 0F) {
        AbeBonus = other.AbeBonus;
      }
      if (other.ArmorBonus != 0F) {
        ArmorBonus = other.ArmorBonus;
      }
      if (other.SubProp1MaxValue != 0F) {
        SubProp1MaxValue = other.SubProp1MaxValue;
      }
      if (other.SubProp2MaxValue != 0F) {
        SubProp2MaxValue = other.SubProp2MaxValue;
      }
      if (other.SubProp3MaxValue != 0F) {
        SubProp3MaxValue = other.SubProp3MaxValue;
      }
      if (other.ReloadingTime != 0F) {
        ReloadingTime = other.ReloadingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18: {
            GunName = input.ReadString();
            break;
          }
          case 26: {
            ItemType = input.ReadString();
            break;
          }
          case 37: {
            BaseDmg = input.ReadFloat();
            break;
          }
          case 45: {
            FiringRate = input.ReadFloat();
            break;
          }
          case 53: {
            CurrentFiringRatePerSecond = input.ReadFloat();
            break;
          }
          case 56: {
            Magazine = input.ReadInt32();
            break;
          }
          case 66: {
            CoreProp = input.ReadString();
            break;
          }
          case 77: {
            CorePropValue = input.ReadFloat();
            break;
          }
          case 82: {
            SubProp1 = input.ReadString();
            break;
          }
          case 93: {
            SubProp1Value = input.ReadFloat();
            break;
          }
          case 98: {
            SubProp2 = input.ReadString();
            break;
          }
          case 109: {
            SubProp2Value = input.ReadFloat();
            break;
          }
          case 114: {
            SubProp3 = input.ReadString();
            break;
          }
          case 125: {
            SubProp3Value = input.ReadFloat();
            break;
          }
          case 128: {
            Use = input.ReadBool();
            break;
          }
          case 136: {
            Block = input.ReadBool();
            break;
          }
          case 149: {
            Price = input.ReadFloat();
            break;
          }
          case 152: {
            SubProp1Type = input.ReadInt32();
            break;
          }
          case 160: {
            SubProp2Type = input.ReadInt32();
            break;
          }
          case 168: {
            SubProp3Type = input.ReadInt32();
            break;
          }
          case 176: {
            CorePropType = input.ReadInt32();
            break;
          }
          case 189: {
            HealthBonus = input.ReadFloat();
            break;
          }
          case 197: {
            BaseDmgBonus = input.ReadFloat();
            break;
          }
          case 205: {
            CritDmgRateBonus = input.ReadFloat();
            break;
          }
          case 213: {
            CritDmgBonus = input.ReadFloat();
            break;
          }
          case 221: {
            HeadshotDmgBonus = input.ReadFloat();
            break;
          }
          case 229: {
            PRateBonus = input.ReadFloat();
            break;
          }
          case 237: {
            AbeBonus = input.ReadFloat();
            break;
          }
          case 245: {
            ArmorBonus = input.ReadFloat();
            break;
          }
          case 253: {
            SubProp1MaxValue = input.ReadFloat();
            break;
          }
          case 261: {
            SubProp2MaxValue = input.ReadFloat();
            break;
          }
          case 269: {
            SubProp3MaxValue = input.ReadFloat();
            break;
          }
          case 277: {
            ReloadingTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendsPack : pb::IMessage<FriendsPack> {
    private static readonly pb::MessageParser<FriendsPack> _parser = new pb::MessageParser<FriendsPack>(() => new FriendsPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendsPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack(FriendsPack other) : this() {
      player1Uid_ = other.player1Uid_;
      player2Uid_ = other.player2Uid_;
      isFriend_ = other.isFriend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendsPack Clone() {
      return new FriendsPack(this);
    }

    /// <summary>Field number for the "Player1Uid" field.</summary>
    public const int Player1UidFieldNumber = 1;
    private int player1Uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Uid {
      get { return player1Uid_; }
      set {
        player1Uid_ = value;
      }
    }

    /// <summary>Field number for the "Player2Uid" field.</summary>
    public const int Player2UidFieldNumber = 2;
    private int player2Uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Uid {
      get { return player2Uid_; }
      set {
        player2Uid_ = value;
      }
    }

    /// <summary>Field number for the "IsFriend" field.</summary>
    public const int IsFriendFieldNumber = 3;
    private int isFriend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFriend {
      get { return isFriend_; }
      set {
        isFriend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendsPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendsPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player1Uid != other.Player1Uid) return false;
      if (Player2Uid != other.Player2Uid) return false;
      if (IsFriend != other.IsFriend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player1Uid != 0) hash ^= Player1Uid.GetHashCode();
      if (Player2Uid != 0) hash ^= Player2Uid.GetHashCode();
      if (IsFriend != 0) hash ^= IsFriend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player1Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player1Uid);
      }
      if (Player2Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player2Uid);
      }
      if (IsFriend != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player1Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Uid);
      }
      if (Player2Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Uid);
      }
      if (IsFriend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFriend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendsPack other) {
      if (other == null) {
        return;
      }
      if (other.Player1Uid != 0) {
        Player1Uid = other.Player1Uid;
      }
      if (other.Player2Uid != 0) {
        Player2Uid = other.Player2Uid;
      }
      if (other.IsFriend != 0) {
        IsFriend = other.IsFriend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player1Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Player2Uid = input.ReadInt32();
            break;
          }
          case 24: {
            IsFriend = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRequestFriendPack : pb::IMessage<SendRequestFriendPack> {
    private static readonly pb::MessageParser<SendRequestFriendPack> _parser = new pb::MessageParser<SendRequestFriendPack>(() => new SendRequestFriendPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRequestFriendPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketProtocol.SocketProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack(SendRequestFriendPack other) : this() {
      targetPlayerUid_ = other.targetPlayerUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequestFriendPack Clone() {
      return new SendRequestFriendPack(this);
    }

    /// <summary>Field number for the "TargetPlayerUid" field.</summary>
    public const int TargetPlayerUidFieldNumber = 1;
    private int targetPlayerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerUid {
      get { return targetPlayerUid_; }
      set {
        targetPlayerUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRequestFriendPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRequestFriendPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetPlayerUid != other.TargetPlayerUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetPlayerUid != 0) hash ^= TargetPlayerUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetPlayerUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetPlayerUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetPlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRequestFriendPack other) {
      if (other == null) {
        return;
      }
      if (other.TargetPlayerUid != 0) {
        TargetPlayerUid = other.TargetPlayerUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetPlayerUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
